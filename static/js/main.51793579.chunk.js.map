{"version":3,"sources":["components/ReturnToMenu.jsx","components/Outcomes.jsx","factories/ship/index.js","factories/gameboard/index.js","algorithms/hunt_target.js","factories/player/index.js","scripts/main.js","scripts/listener_manager.js","components/Battle.jsx","components/Settings.jsx","components/Menu.jsx","App.jsx","index.js"],"names":["ReturnToMenu","history","useHistory","id","onClick","push","className","Outcomes","p","currentPlayer","categoryNum","coordinate","outcomesArr","setOutcomesArr","useEffect","length","newArr","slice","addingListInArr","outcomesInListFormat","map","txt","Ship","name","health","currentState","currentHealth","isSunk","getName","getHealth","getCurrentState","hit","Gameboard","shipClasses","recentCoordinateAttackedShip","x","y","board","outerLen","innerLen","arr","i","data","j","shipInfo","String","fromCharCode","twoDimensionalArrayGenerator","occupiedPos","this","missedAtks","assignCoordinates","len","bh","n","Math","floor","random","randomNumGen","n1","round","n2","betweenTwoNumbers","xy","validateCoordinates","addShipsToTheBoard","obj","pos","ship","some","o","shipsOnTheBoard","currentTotalShips","checkShipState","isShipGotHit","ships","removeCurrentOccupiedPosIfHit","forEach","splice","concat","resetArray","pop","resetBoard","rowTiles","tile","receiveAttack","getRecentCoordinate","getOccupiedPos","getCurrentTotalShips","huntTarget","moves","firstHuntAtk","setFirstHunt","sameShipHuntShot","setSameShipHuntShot","availableTargetShots","setAvailableTargetShots","posNum","recentSunk","setRecentSunk","move","index","checkIfThereAreNoPossibleAttacks","prevShots","Array","isArray","m","step","availableTargetShot","nextShot","attackRef","target","axis","prevShot","shot","findIndex","generateTargetShot","atkRef","refillAvailableShots","nextIndex","targetPhase","recentTargetShots","transitionToTargetMode","Player","initialTurn","player","difficulty","num","turn","isHuman","playerNum","displayName","AILEVEL","gameboard","opponentOccupiedPosLeft","randomPlays","max","aiLegalAtks","bool","val","togglePlayerTurn","aiMove","selectedAtk","isWinner","toggleLegality","atk","refillLegalAtks","getAiLegalAtks","setAiLegalAtks","setOpponentOccupiedPosLeft","Player1","Player2","gamemode","p1diff","p2diff","a","toggleTurnForBothPlayers","p1","p2","checkWinner","P1","P2","autoBattle","AIAttack","attacker","defender","prevShipsLeft","randomize","resetGame","newLegalShots","ListenerManager","listeners","nextId","add","elem","args","addEventListener","addListener","call","Error","remove","listener","removeEventListener","removeListener","removeAll","old","Object","keys","Battle","width","window","innerWidth","SIZE","useState","winner","setWinner","start","setStart","outcomesVisibility","setOutcomesVisibility","current","setCurrent","fakeCount","setFakeCount","LM","cv1Ref","useRef","cv2Ref","toggleP1ShipVisibility","setToggleP1ShipVisibility","toggleP2ShipVisibility","setToggleP2ShipVisibility","allowOutcomes","setAllowOutcomes","setCoordinate","handleStartButton","value","handleVisibilityButton","setPlayerAsStates","Promise","resolve","setTimeout","resetStates","HandleRestartButton","cv1","cv2","ctx1","getContext","ctx2","clearRect","height","drawBoard","randomizeShipLocation","e","toggleShipVisibility","includes","drawSquare","ctx","sz","fillStyle","fillRect","strokeStyle","strokeRect","drawShip","direction","SQR","row","r","col","c","filter","visualizeBoardForAIvsAI","simulateBattleship","recentAttackedPos","drawX","drawCircle","shipHit","beginPath","lineWidth","moveTo","lineTo","changeStrokeStyle","stroke","centerX","centerY","endAngle","PI","arc","canvasContainer","ref","size","playerInfo","displayBeforeStartButtons","displayTurnOrWinner","getCursorPosition","cvs","event","rect","getBoundingClientRect","clientX","left","clientY","top","playerAttack","humanAttack","cv","handler","startHumanAttack","startAiAttack","attackDelay","ms","checkCurrentPlayerTurn","clearTimeout","Settings","setGamemode","setDifficulty","handleDifficultyChange","valB","valA","onChange","ShowSelectDifficulty","Menu","NavigateSwitch","exact","path","children","Home","document","getElementById","onclick","location","href","setGameType","parseInt","setPreparationBeforeGame","src","alt","to","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.51793579.chunk.js","sourcesContent":["import { useHistory } from 'react-router-dom'\n\nexport default function ReturnToMenu() {\n\tconst history = useHistory();\n\n\tfunction handleClick() {\n\t\thistory.push('/react-battleship/');\n\t}\n\treturn (\n\t\t<li id=\"Return\" onClick={handleClick}>\n\t\t\t<i className=\"fas fa-arrow-circle-left\"></i>\n\t\t\tReturn to Menu\n\t\t</li>\n\t)\n}","import React, { useEffect } from 'react';\n\nexport default function Outcomes({\n\tp,\n\tcurrentPlayer,\n\tcategoryNum,\n\tcoordinate,\n\toutcomesArr,\n\tsetOutcomesArr }) {\n\n\tuseEffect(() => {\n\t\tconst addingListInArr = () => {\n\t\t\tif (categoryNum === null) return;\n\t\t\tswitch (categoryNum) {\n\t\t\t\tcase 2:\n\t\t\t\t\toutcomesArr.push(\n\t\t\t\t\t\t`${currentPlayer} successfully hit an attack at ${coordinate}.`\n\t\t\t\t\t)\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\toutcomesArr.push(\n\t\t\t\t\t\t`${currentPlayer} missed an attack at ${coordinate}.`\n\t\t\t\t\t)\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (outcomesArr.length > 5) {\n\t\t\tconst newArr = outcomesArr.slice(1);\n\t\t\tsetOutcomesArr(newArr);\n\t\t}\n\t\taddingListInArr();\n\t}, [p, currentPlayer, outcomesArr, coordinate]);\n\tconst outcomesInListFormat = outcomesArr.map((txt, id) => {\n\t\treturn (\n\t\t\t<li key={id}>\n\t\t\t\t{txt}\n\t\t\t</li>\n\t\t);\n\t})\n\treturn (\n\t\t<ul id=\"Outcomes\">\n\t\t\t{outcomesInListFormat}\n\t\t</ul>\n\t)\n}\n","const Ship = (name, health) => { //health and length are synonymous based on the inherent logic and rule of this game\n\tlet currentState = 'safe'; // three state: safe, hit, sunk\n\tlet currentHealth = health;\n\tconst getName = () => name;\n\tconst getHealth = () => currentHealth;\n\tconst getCurrentState = () => currentState;\n\tconst isSunk = () => {\n\t\treturn currentHealth === 0 ? currentState = 'sunk' : null;\n\t}\n\tconst hit = () => {\n\t\tcurrentHealth -= 1;\n\t\tcurrentState = 'hit';\n\t\tisSunk();\n\t};\n\treturn {\n\t\tgetName,\n\t\tgetHealth,\n\t\tgetCurrentState,\n\t\thit,\n\t\tisSunk,\n\t}\n}\n\nexport default Ship;","import Ship from '../ship'\n\nexport default function Gameboard() {\n\tconst height = 10; //immutable board height\n\tconst width = 10; //mutable board width\n\t//default sets of ships\n\tconst shipClasses = [\n\t\t['Carrier', 5],\n\t\t['Battleship', 4],\n\t\t['Cruiser', 3],\n\t\t['Submariner', 3],\n\t\t['Destroyer', 2]\n\t]\n\tlet recentCoordinateAttackedShip = { x: -15, y: -15 };\n\tconst twoDimensionalArrayGenerator = (outerLen, innerLen) => {\n\t\tlet arr = [];\n\t\tfor (let i = 0; i < outerLen; i++) {\n\t\t\tlet data = [];\n\t\t\tfor (let j = 0; j < innerLen; j++) {\n\t\t\t\tlet shipInfo = [];\n\t\t\t\t//name coordinate for the board e.g arr[0][7][0] would be A7\n\t\t\t\tshipInfo.push(`${String.fromCharCode(65 + i)}${j + 1}`, 0)\n\t\t\t\tdata.push(shipInfo);\n\t\t\t}\n\t\t\tarr.push(data);\n\t\t}\n\t\treturn arr;\n\t}\n\tconst betweenTwoNumbers = (x) => { return x > 0.5 ? 0 : 1; }\n\n\tconst board = twoDimensionalArrayGenerator(height, width); //A 2d array-ish for coodinations\n\tconst resetArray = (arr) => {\n\t\twhile (arr.length > 0) {\n\t\t\tarr.pop();\n\t\t}\n\t}\n\tconst randomNumGen = (len) => { //\n\t\tconst n = (width - len);\n\t\treturn Math.floor(Math.random() * n) + 1;\n\t}\n\tconst occupiedPos = []; //occupied coordinate positions -- tracks what is available or not\n\tfunction coordinate(x, y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n\n\tlet missedAtks = [];\n\n\t//assign coordinates to a ship\n\tconst assignCoordinates = (len, bh) => {\n\t\tlet arr = [];\n\t\tlet isCoordinatesTaken = false;\n\t\tconst x = randomNumGen(len); //results to an integer between 0 and (h/w - length of ship)\n\t\tconst y = Math.floor(Math.random() * bh); //output would be integer between 0 and 9\n\t\tconst n1 = Math.round(Math.random()); //between 0 and 1\n\t\tconst n2 = betweenTwoNumbers(n1); //return 0 or 1 opposed to the output of n1\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tconst xy = [x + i, y];\n\t\t\tarr.push(new coordinate(xy[n1], xy[n2]));\n\t\t}\n\t\tisCoordinatesTaken = validateCoordinates(x, y, len, n1);\n\t\t//call this function again when the coordinate is taken, otherwise, proceed to the process\n\t\tif (isCoordinatesTaken === true) {\n\t\t\treturn assignCoordinates(len, bh) //restart the function\n\t\t}\n\t\treturn arr;\n\t}\n\n\t//add the ships and its coordinates to the ship holder\n\tconst addShipsToTheBoard = () => {\n\t\tconst obj = [];\n\t\tfor (let i = 0; i < shipClasses.length; i++) {\n\t\t\tconst name = shipClasses[i][0];\n\t\t\tconst length = shipClasses[i][1];\n\t\t\tconst pos = assignCoordinates(length, height);\n\t\t\toccupiedPos.push(...pos);\n\t\t\tconst ship = Ship(name, length);\n\t\t\tobj.push({\n\t\t\t\tship: ship,\n\t\t\t\tpos: pos,\n\t\t\t});\n\t\t}\n\t\treturn obj;\n\t}\n\n\t//check whether the following coordinates existed already\n\tconst validateCoordinates = (x, y, len, n1) => {\n\t\tif (occupiedPos.length === 0) { return false; }\n\t\treturn occupiedPos.some(o => n1 === 0 ? (o.x >= x && o.x <= x + len) && o.y === y : (o.y >= x && o.y <= x + len) && o.x === y);\n\t}\n\n\tconst resetBoard = () => {\n\t\tboard.map(rowTiles => {\n\t\t\trowTiles.map(tile => {\n\t\t\t\ttile[1] = 0;\n\t\t\t})\n\t\t})\n\t}\n\t//An array to keep the ship factories and its board positions\n\tconst shipsOnTheBoard = addShipsToTheBoard();\n\tlet currentTotalShips = shipsOnTheBoard.length;\n\n\t//check if all ships are gone or not\n\tconst isAllShipsGone = () => {\n\t\treturn currentTotalShips === 0 ? 1 : 0;\n\t}\n\n\t//Either sunk or not sunk\n\tconst checkShipState = (ship) => {\n\t\tif (ship.ship.getCurrentState() === 'sunk') {\n\t\t\tcurrentTotalShips -= 1;\n\t\t}\n\t}\n\n\tconst receiveAttack = (x, y, ships) => {\n\t\tif (x > height && y > height) {\n\t\t\treturn;\n\t\t}\n\t\tif (!board[x][y][1]) {\n\t\t\tboard[x][y][1] = 1 - board[x][y][1];\n\t\t\tconst attackMissed = isShipGotHit(x, y, ships);\n\t\t\tif (attackMissed === true) {\n\t\t\t\tmissedAtks.push({\n\t\t\t\t\tx: x,\n\t\t\t\t\ty: y\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tisAllShipsGone();\n\t}\n\n\tconst isShipGotHit = (x, y, ships) => {\n\t\tfor (const ship of ships) {\n\t\t\tfor (const pos of ship.pos) {\n\t\t\t\tif (pos.x === x && pos.y === y) {\n\t\t\t\t\tship.ship.hit(); //degrade the quality of the ship by decrementing it's health\n\t\t\t\t\tcheckShipState(ship); //check it's state whether it's still floating or sunk\n\t\t\t\t\tremoveCurrentOccupiedPosIfHit(occupiedPos, x, y); //remove from current occupied positions\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tconst removeCurrentOccupiedPosIfHit = (arr, x, y) => {\n\t\tarr.forEach((pos, i) => {\n\t\t\tif (pos.x === x && pos.y === y) {\n\t\t\t\t//remove occupied position using a specified coordinates chosen by user\n\t\t\t\tconst hit = arr.splice(i, 1);\n\t\t\t\trecentCoordinateAttackedShip = hit[0];\n\t\t\t\treturn [].concat(...hit);\n\t\t\t}\n\t\t});\n\t}\n\n\t//get mutable variables\n\tconst getOccupiedPos = () => { return occupiedPos; }\n\tconst getCurrentTotalShips = () => { return currentTotalShips; }\n\tconst getRecentCoordinate = () => { return recentCoordinateAttackedShip; }\n\treturn {\n\t\tshipsOnTheBoard,\n\t\taddShipsToTheBoard,\n\t\tboard,\n\t\tresetArray,\n\t\tresetBoard,\n\t\tcurrentTotalShips,\n\t\tmissedAtks,\n\t\treceiveAttack,\n\t\toccupiedPos,\n\t\tisShipGotHit,\n\t\tgetRecentCoordinate,\n\t\tgetOccupiedPos,\n\t\tgetCurrentTotalShips\n\t}\n}\n\n","//Known as Hunt and Target Attack or King's move without diagonal attack\n//Improved algorithm where the AI is structured a new decision system when it specifically hits a ship\n//by checking it's neighboring square at one step. When choosing the wrong square it'll return to choose\n//between the remaining neighboring squares until it hits. If ship is still alive, it'll continue to it's direction\n//which is either vertical or horizontal; diagonal is an illegal move as it requires 2 steps.\nexport default function huntTarget(\n\tmoves,\n\tfirstHuntAtk,\n\tsetFirstHunt,\n\tsameShipHuntShot,\n\tsetSameShipHuntShot,\n\tavailableTargetShots,\n\tsetAvailableTargetShots,\n\tposNum,\n\trecentSunk,\n\tsetRecentSunk\n) {\n\tlet move;     //This is the chosen move after the process of choosing possible attacks\n\tlet index = Math.floor(Math.random() * moves.length - 1);\n\n\tconst random = (arr) => {\n\t\tconst i = Math.floor(Math.random() * arr.length);\n\t\treturn arr.splice(i, 1);\n\t}\n\tconst checkIfThereAreNoPossibleAttacks = (arr, prevShots) => {\n\t\tif (prevShots.length === 0) return false;\n\t\t//m => reference for array element\n\t\t//step => is either 1, -1 which is used for neighboring square attacks\n\t\tif (Array.isArray(prevShots[0])) {\n\t\t\tfor (let i = prevShots.length - 1; i >= 0; i--) {\n\t\t\t\tconst x = (m, step) => m[0] === prevShots[i][0] + step;\n\t\t\t\tconst y = (m, step) => m[1] === prevShots[i][1] + step;\n\t\t\t\tconst findIfAttacksArePossible = (m) => (x(m, 1) && y(m, 0)) || (x(m, -1) && y(m, 0))\n\t\t\t\t\t|| (x(m, 0) && y(m, 1)) || (x(m, 0) && y(m, -1));\n\t\t\t\tif (arr.some(findIfAttacksArePossible)) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tprevShots.splice(i, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst x = (m, step) => m[0] === prevShots[0] + step;\n\t\t\tconst y = (m, step) => m[1] === prevShots[1] + step;\n\t\t\tconst findIfAttacksArePossible = (m) => (x(m, 1) && y(m, 0)) || (x(m, -1) && y(m, 0))\n\t\t\t\t|| (x(m, 0) && y(m, 1)) || (x(m, 0) && y(m, -1));\n\t\t\treturn arr.some(findIfAttacksArePossible);\n\t\t}\n\n\t}\n\n\t//The moves, chosen next attack or attack to be referenced\n\t//3rd arg refers to the center of the possibilities during the target mode\n\tconst availableTargetShot = (arr, nextShot, attackRef) => {\n\t\tif (attackRef === null) return index;\n\t\tconst target = nextShot.target;\n\t\tconst axis = nextShot.axis;\n\t\tconst prevShot = attackRef ? sameShipHuntShot[sameShipHuntShot.length - 1] : firstHuntAtk;\n\t\tconst isNextShotAvailable = (m) => axis === 'y' ? m[1] === prevShot[1] + target && m[0] === prevShot[0]\n\t\t\t: m[0] === prevShot[0] + target && m[1] === prevShot[1];\n\t\tconst shot = arr.findIndex(isNextShotAvailable);\n\t\tif (shot === -1) { return generateTargetShot(arr); }\n\t\treturn shot;\n\t}\n\tconst generateTargetShot = (arr) => {\n\t\t//const chooseBetweenFirstOrRecentAtk = firstHuntAtk !== sameShipHuntShot && sameShipHuntShot !== null;\n\t\tlet atkRef = false;\n\t\tif (checkIfThereAreNoPossibleAttacks(moves, firstHuntAtk)) {\n\t\t\tatkRef = false;\n\t\t} else if (checkIfThereAreNoPossibleAttacks(moves, sameShipHuntShot)) {\n\t\t\tatkRef = true;\n\t\t}\n\t\telse if (!sameShipHuntShot.length) {\n\t\t\tatkRef = null;\n\t\t}\n\n\t\tlet nextShot = random(availableTargetShots);\n\t\treturn availableTargetShot(arr, ...nextShot, atkRef);\n\t}\n\n\t//Target mode is activated\n\tfunction targetPhase() {\n\t\tif (firstHuntAtk !== null) {\n\t\t\tconst nextIndex = generateTargetShot(moves);\n\t\t\tmove = moves.splice(nextIndex, 1);\n\n\t\t} else { //Just the normal random attack\n\t\t\tmove = moves.splice(index, 1);\n\t\t}\n\t}\n\n\n\tfunction refillAvailableShots() {\n\t\tif (availableTargetShots.length === 0) {\n\t\t\tsetSameShipHuntShot(firstHuntAtk);\n\t\t}\n\t\tsetAvailableTargetShots([\n\t\t\t{\n\t\t\t\ttarget: 1,\n\t\t\t\taxis: 'x',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttarget: -1,\n\t\t\t\taxis: 'x',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttarget: 1,\n\t\t\t\taxis: 'y',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttarget: -1,\n\t\t\t\taxis: 'y',\n\t\t\t}\n\t\t]);\n\t}\n\n\tfunction transitionToTargetMode() {\n\t\tif (firstHuntAtk === null && posNum.some(m => m.x === move[0][0] && m.y === move[0][1])) {\n\t\t\tsetFirstHunt(...move);\n\t\t} else if (firstHuntAtk !== null && posNum.some(m => m.x === move[0][0] && m.y === move[0][1])) {\n\t\t\tconst recentTargetShots = sameShipHuntShot;\n\t\t\trecentTargetShots.push(...move);\n\t\t\tsetSameShipHuntShot(recentTargetShots);\n\t\t}\n\t\trefillAvailableShots();\n\t\tsetSameShipHuntShot(sameShipHuntShot);\n\t}\n\n\tfunction transitionToHuntMode() {\n\t\tif (recentSunk) {\n\t\t\tsetFirstHunt(null);\n\t\t\tsetRecentSunk(!recentSunk);\n\t\t\trefillAvailableShots();\n\t\t}\n\t}\n\n\t//Sequential step of this algorithm\n\ttransitionToHuntMode();\n\ttargetPhase();\n\ttransitionToTargetMode();\n\treturn [].concat(...move);\n}","import Gameboard from '../gameboard';\nimport huntTarget from '../../algorithms/hunt_target';\n\nexport default function Player(initialTurn, player, difficulty, num) {\n\tlet turn = initialTurn;\n\tconst isHuman = player; //Purpose: to avoid configure the wrong subject\n\tconst playerNum = num;\n\tconst displayName = isHuman ? 'Player' : 'AI'; //To identify which party is which\n\tlet isWinner = false; //Determine the winner\n\n\t//Only applies to AI\n\tconst AILEVEL = difficulty; // 1 or 2\n\tconst randomNum = (n) => {\n\t\treturn Math.floor(Math.random() * n);\n\t}\n\tconst gameboard = Gameboard();\n\tlet opponentOccupiedPosLeft = 17;\n\n\t//Use to iterate coordinates to be used as a legal attack for AI\n\tconst randomPlays = (max) => {\n\t\tconst newArr = [];\n\t\tfor (let i = 0; i < max; i++) {\n\t\t\tfor (let j = 0; j < max; j++) {\n\t\t\t\tnewArr.push([i, j]);\n\t\t\t};\n\t\t};\n\t\treturn newArr;\n\t}\n\n\tconst selectedAtk = (x, y) => {\n\t\treturn [x, y];\n\t}\n\t//array of legal attacks - used by an AI\n\tlet aiLegalAtks = randomPlays(10);\n\tlet recentSunk = false;\n\tfunction setRecentSunk(bool) { recentSunk = bool; }\n\n\t//Special variable for Player(AI) with higher difficulty\n\tlet firstHuntAtk = null;\n\tlet sameShipHuntShot = [];\n\tfunction setFirstHunt(val) { firstHuntAtk = val; }\n\tfunction setSameShipHuntShot(val) { sameShipHuntShot = val; }\n\tlet availableTargetShots = [\n\t\t{\n\t\t\ttarget: 1,\n\t\t\taxis: 'x',\n\t\t},\n\t\t{\n\t\t\ttarget: -1,\n\t\t\taxis: 'x',\n\t\t},\n\t\t{\n\t\t\ttarget: 1,\n\t\t\taxis: 'y',\n\t\t},\n\t\t{\n\t\t\ttarget: -1,\n\t\t\taxis: 'y',\n\t\t}\n\t]\n\tfunction setAvailableTargetShots(arr) {\n\t\tavailableTargetShots = arr;\n\t}\n\n\tconst refillLegalAtks = () => {\n\t\treturn randomPlays(10);\n\t}\n\n\tconst toggleLegality = (x, y) => {\n\t\tconst index = aiLegalAtks.findIndex(atk => atk[0] === x & atk[1] === y);\n\t\taiLegalAtks.splice(index, 1);\n\t}\n\n\t//AI move algorithm\n\tconst aiMove = (moves) => {\n\t\tif (moves.length !== 0) {\n\t\t\tif (AILEVEL == 2) {\n\t\t\t\treturn huntTarget(\n\t\t\t\t\tmoves,\n\t\t\t\t\tfirstHuntAtk,\n\t\t\t\t\tsetFirstHunt,\n\t\t\t\t\tsameShipHuntShot,\n\t\t\t\t\tsetSameShipHuntShot,\n\t\t\t\t\tavailableTargetShots,\n\t\t\t\t\tsetAvailableTargetShots,\n\t\t\t\t\topponentOccupiedPosLeft,\n\t\t\t\t\trecentSunk,\n\t\t\t\t\tsetRecentSunk\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst move = moves.splice(randomNum(moves.length - 1), 1);\n\t\t\treturn [].concat(...move);\n\t\t}\n\t}\n\n\tconst togglePlayerTurn = (turn) => { return !turn; }\n\treturn {\n\t\tgameboard,\n\t\tturn,\n\t\ttogglePlayerTurn,\n\t\taiMove,\n\t\taiLegalAtks,\n\t\trecentSunk,\n\t\topponentOccupiedPosLeft,\n\t\tselectedAtk,\n\t\tisWinner,\n\t\tisHuman,\n\t\tdisplayName,\n\t\ttoggleLegality,\n\t\trefillLegalAtks,\n\t\tplayerNum,\n\t\tgetAiLegalAtks() { return aiLegalAtks; },\n\t\tsetAiLegalAtks(arr) { aiLegalAtks = arr; },\n\t\tsetOpponentOccupiedPosLeft(val) { opponentOccupiedPosLeft = val; },\n\t\tsetRecentSunk\n\t}\n}","import Player from '../factories/player';\n\n//Initial creation of player objects\nexport let Player1 = Player(true, true, 1, 1);\nexport let Player2 = Player(false, false, 1, 2);\n\n//Set the gamemode including the AI difficulty\nexport async function setGameType(gamemode, p1diff, p2diff) {\n\tif (gamemode == 0) {\n\t\tPlayer1 = Player(true, true, null, 1);\n\t\tPlayer2 = Player(false, true, null, 2);\n\t\tPlayer1.displayName = 'Player 1';\n\t\tPlayer2.displayName = 'Player 2';\n\t} else if (gamemode == 1) {\n\t\tPlayer1 = Player(true, true, null, 1);\n\t\tPlayer2 = Player(false, false, p2diff, 2);\n\t\tPlayer1.displayName = 'Player';\n\t\tPlayer2.displayName = 'AI';\n\t} else {\n\t\tPlayer1 = Player(true, false, p1diff, 1);\n\t\tPlayer2 = Player(false, false, p2diff, 2);\n\t\tPlayer1.displayName = 'AI 1';\n\t\tPlayer2.displayName = 'AI 2';\n\t}\n}\n\n//toggle turns\nexport const toggleTurnForBothPlayers = (p1, p2) => {\n\tp1.turn = p1.togglePlayerTurn(p1.turn);\n\tp2.turn = p2.togglePlayerTurn(p2.turn);\n}\n\n\nconst checkWinner = (P1, P2) => {\n\tif (P1.gameboard.getOccupiedPos().length == 0) {\n\t\tP2.isWinner = true;\n\t} else if (P2.gameboard.getOccupiedPos().length == 0) {\n\t\tP1.isWinner = true;\n\t}\n}\n\n//Auto function for AIvsAI gamemode\nexport const autoBattle = (P1, P2) => {\n\tAIAttack(P1, P2);\n\tAIAttack(P2, P1);\n\tcheckWinner(P1, P2);\n\ttoggleTurnForBothPlayers(P1, P2);\n}\n\nconst AIAttack = (attacker, defender) => {\n\tif (attacker.turn) {\n\t\tattacker.setOpponentOccupiedPosLeft(defender.gameboard.getOccupiedPos());\n\t\tconst prevShipsLeft = defender.gameboard.getCurrentTotalShips();\n\t\tconst atk = attacker.aiMove(attacker.aiLegalAtks);\n\t\tconst ships = defender.gameboard.shipsOnTheBoard;\n\t\tdefender.gameboard.receiveAttack(atk[0], atk[1], ships);\n\n\t\tif (prevShipsLeft !== defender.gameboard.getCurrentTotalShips()) {\n\t\t\tattacker.setRecentSunk(true);\n\t\t}\n\t}\n}\n\n//Attack the ships of the other party\nexport const playerAttack = (attacker, defender, x, y) => {\n\tconst shots = attacker.getAiLegalAtks();\n\tif (!shots.some(o => o[0] == x && o[1] == y)) return true;\n\tconst ships = defender.gameboard.shipsOnTheBoard;\n\tattacker.toggleLegality(x, y);\n\tdefender.gameboard.receiveAttack(y, x, ships);\n\tcheckWinner(Player1, Player2);\n\ttoggleTurnForBothPlayers(Player1, Player2);\n\treturn false;\n}\n\nexport const randomize = (player) => {\n\tconst p = player.gameboard;\n\tp.resetArray(p.occupiedPos);\n\tp.shipsOnTheBoard = p.addShipsToTheBoard();\n}\n\nexport const resetGame = (player) => {\n\trandomize(player);\n\tif (player.isWinner) { player.isWinner = false; }\n\tplayer.gameboard.resetBoard();\n\tconst newLegalShots = player.refillLegalAtks();\n\tif (!player.isHuman) {\n\t\tplayer.aiLegalAtks = newLegalShots;\n\t\treturn;\n\t}\n\tplayer.setAiLegalAtks(newLegalShots);\n}\n","export default function ListenerManager() {\n\tlet listeners = {};\n\tlet nextId = 1;\n\t// Returns an id for the listener.\n\tthis.add = (elem, ...args) => {\n\t\t(elem.addEventListener || elem.add || elem.addListener).call(elem, ...args);\n\t\tconst id = nextId++;\n\t\tlisteners[id] = {\n\t\t\telem: elem,\n\t\t\targs: args,\n\t\t};\n\t\tif (args.length < 2) {\n\t\t\tthrow new Error('too few args');\n\t\t}\n\t\treturn id;\n\t};\n\n\t//removes a specific listener using ID\n\tthis.remove = (id) => {\n\t\tconst listener = listeners[id];\n\t\tif (listener) {\n\t\t\tdelete listener[id];\n\t\t\tconst elem = listener.elem;\n\t\t\t(elem.removeEventListener || elem.removeListener).call(elem, ...listener.args);\n\t\t}\n\t};\n\n\tthis.removeAll = () => { //removes each existing listeners\n\t\tconst old = listeners;\n\t\tlisteners = {};\n\t\tObject.keys(old).forEach((id) => {\n\t\t\tconst listener = old[id];\n\t\t\tif (listener.args < 2) {\n\t\t\t\tthrow new Error('too few args');\n\t\t\t}\n\t\t\tconst elem = listener.elem;\n\t\t\t(elem.removeEventListener || elem.removeListener).call(elem, ...listener.args);\n\t\t});\n\t};\n}","import React, { useState, useEffect, useRef } from 'react';\n\nimport ReturnToMenu from './ReturnToMenu';\nimport Outcomes from './Outcomes';\nimport { Player1, Player2, autoBattle, randomize, playerAttack, resetGame, toggleTurnForBothPlayers } from '../scripts/main'\n\nimport ListenerManager from '../scripts/listener_manager'\n\nexport default function Battle({ gamemode, difficulty }) {\n\t//STATES\n\t//viewport width used for canvas size\n\tconst width = window.innerWidth;\n\n\t//Immutable and conditionally-based variable\n\tconst SIZE = width < 600 ? width * .60 : width * .20;\n\n\t//Player factory function as a state\n\tconst [P1,] = useState(Player1);\n\tconst [P2,] = useState(Player2);\n\tconst [outcomesArr, setOutcomesArr] = useState([]);\n\n\t//Used to manually start and end the game\n\tconst [winner, setWinner] = useState(false);\n\tconst [start, setStart] = useState(false);\n\tconst [outcomesVisibility, setOutcomesVisibility] = useState(false);\n\n\t//Set the current player\n\tconst [current, setCurrent] = useState({ turn: 1, isHuman: Player1.isHuman });\n\n\t//Used as a fake count to trigger an associated useEffect as a dependency value\n\tconst [fakeCount, setFakeCount] = useState(0);\n\n\t//Event listeners\n\tconst LM = new ListenerManager();\n\n\t//Canvas stuff\n\tconst cv1Ref = useRef(null);\n\tconst cv2Ref = useRef(null);\n\n\tconst [toggleP1ShipVisibility, setToggleP1ShipVisibility] = useState(true);\n\tconst [toggleP2ShipVisibility, setToggleP2ShipVisibility] = useState(true);\n\tconst [allowOutcomes, setAllowOutcomes] = useState(null);\n\tconst [coordinate, setCoordinate] = useState(null);\n\n\t//Triggered after a click on start button\n\tconst handleStartButton = () => {\n\t\tif (!start && gamemode.value === 0) {\n\t\t\tsetToggleP1ShipVisibility(false);\n\t\t\tsetToggleP2ShipVisibility(false);\n\t\t}\n\t\tsetStart(!start);\n\t\tsetOutcomesArr(['The game has started...']);\n\t}\n\n\tconst handleVisibilityButton = () => {\n\t\tsetOutcomesVisibility(!outcomesVisibility);\n\t}\n\n\t//Reset all the propety of palyer and gameboard functions to initial state\n\tfunction setPlayerAsStates() {\n\t\treturn new Promise(resolve => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresetGame(P1);\n\t\t\t\tresetGame(P2);\n\t\t\t\tresolve('resolved');\n\t\t\t}, 200);\n\t\t});\n\t}\n\n\tconst resetStates = () => {\n\t\tsetStart(!start);\n\t\tsetWinner(false);\n\t\tsetAllowOutcomes(null);\n\t\tsetCurrent({\n\t\t\tturn: 1,\n\t\t\tisHuman: P1.isHuman\n\t\t})\n\t\tLM.removeAll();\n\t}\n\n\t//Reset all states to initial value\n\tasync function HandleRestartButton() {\n\t\tconst cv1 = cv1Ref.current;\n\t\tconst cv2 = cv2Ref.current;\n\t\tconst ctx1 = cv1.getContext('2d');\n\t\tconst ctx2 = cv2.getContext('2d');\n\t\tctx1.clearRect(0, 0, cv1.width, cv1.height);\n\t\tctx2.clearRect(0, 0, cv2.width, cv2.height);\n\t\tif (start) {\n\t\t\tif (!P1.turn) {\n\t\t\t\ttoggleTurnForBothPlayers(P1, P2);\n\t\t\t}\n\t\t\tawait setPlayerAsStates();\n\t\t\tdrawBoard(ctx1, SIZE, P1);\n\t\t\tdrawBoard(ctx2, SIZE, P2);\n\t\t\tresetStates();\n\t\t}\n\t}\n\n\tconst randomizeShipLocation = (e) => {\n\t\tconst cv1 = cv1Ref.current;\n\t\tconst cv2 = cv2Ref.current;\n\t\tconst ctx1 = cv1.getContext('2d');\n\t\tconst ctx2 = cv2.getContext('2d');\n\t\tif (e.target.id === 'randomize-p1') {\n\t\t\trandomize(P1);\n\t\t\tdrawBoard(ctx1, SIZE, P1);\n\t\t\treturn;\n\t\t}\n\t\trandomize(P2);\n\t\tdrawBoard(ctx2, SIZE, P2);\n\t}\n\tconst toggleShipVisibility = (e) => {\n\t\tif (e.target.id.includes('1')) {\n\t\t\tsetToggleP1ShipVisibility(!toggleP1ShipVisibility);\n\t\t\treturn;\n\t\t}\n\t\tsetToggleP2ShipVisibility(!toggleP2ShipVisibility);\n\t}\n\n\tconst enablePrintOutcomes = () => {\n\t\treturn (\n\t\t\t<Outcomes\n\t\t\t\tp={P1.turn}\n\t\t\t\tcurrentPlayer={P1.turn ? P2.displayName : P1.displayName}\n\t\t\t\tcategoryNum={allowOutcomes}\n\t\t\t\tcoordinate={coordinate}\n\t\t\t\toutcomesArr={outcomesArr}\n\t\t\t\tsetOutcomesArr={setOutcomesArr}\n\t\t\t/>\n\t\t)\n\t}\n\t//draw tiles for the board\n\tconst drawSquare = (x, y, ctx, sz) => {\n\t\tctx.fillStyle = 'rgb(7,67,114)';\n\t\tctx.fillRect(x * sz, y * sz, sz, sz);\n\t\tctx.strokeStyle = 'rgb(7,100,176)';\n\t\tctx.strokeRect(x * sz, y * sz, sz, sz);\n\t}\n\n\tconst drawShip = (x, y, ctx, sz, len, direction) => {\n\t\tctx.fillStyle = 'rgb(224,224,224)';\n\t\tctx.strokeStyle = 'rgb(34,34,34)';\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tdirection === 0 ? ctx.fillRect(x * sz, y * sz, sz, sz * len) : ctx.fillRect(x * sz, y * sz, sz * len, sz);\n\t\t}\n\t\tdirection === 0 ? ctx.strokeRect(x * sz, y * sz, sz, sz * len) : ctx.strokeRect(x * sz, y * sz, sz * len, sz);\n\t}\n\n\t//draw the game board\n\tconst drawBoard = (ctx, sz, player) => {\n\t\tconst SQR = sz * ((100 / 10) * 0.01); //square size of each coordinates\n\t\tconst pos = player.gameboard.shipsOnTheBoard;\n\t\tconst occupiedPos = player.gameboard.getOccupiedPos();\n\t\tconst board = player.gameboard.board;\n\t\tboard.forEach((row, r) => {\n\t\t\trow.forEach((col, c) => {\n\t\t\t\t//Auto visualize ships in AI board\n\t\t\t\tif (!toggleP1ShipVisibility && player.turn === true) {\n\t\t\t\t\tdrawSquare(c, r, ctx, SQR);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!toggleP2ShipVisibility && player.turn === false) {\n\t\t\t\t\tdrawSquare(c, r, ctx, SQR);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (player.isHuman && occupiedPos.filter(o => o.x === r && o.y === c).length === 1) {\n\t\t\t\t\tvisualizeBoardForAIvsAI(pos, c, r, ctx, SQR);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tdrawSquare(c, r, ctx, SQR);\n\t\t\t})\n\t\t})\n\t}\n\n\tconst visualizeBoardForAIvsAI = (pos, c, r, ctx, SQR) => {\n\t\tfor (const ship of pos) {\n\t\t\tif (ship.pos[0].x === r && ship.pos[0].y === c) {\n\t\t\t\tif (ship.pos[0].x === r && ship.pos[1].x === r) {\n\t\t\t\t\tdrawShip(c, r, ctx, SQR, ship.pos.length, 1);\n\t\t\t\t} else {\n\t\t\t\t\tdrawShip(c, r, ctx, SQR, ship.pos.length, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//draw ship placements specifically for AI\n\t//Functionality during the game -> marks the attacked coordinates\n\tconst simulateBattleship = (ctx, sz, player) => {\n\t\tconst SQR = sz * ((100 / 10) * 0.01);\n\t\tconst board = player.gameboard.board;\n\t\tconst recentAttackedPos = player.gameboard.getRecentCoordinate();\n\t\tboard.forEach((row, r) => {\n\t\t\trow.forEach((col, c) => { //0 = unattacked, 1 = recency(by 1), 2 = already marked\n\t\t\t\tif (col[1] === 1) {\n\t\t\t\t\tsetCoordinate(col[0]);\n\t\t\t\t\tif (recentAttackedPos.x === r && recentAttackedPos.y === c) {\n\t\t\t\t\t\tsetAllowOutcomes(2);\n\t\t\t\t\t\tdrawX(c + 1, r + 1, ctx, SQR, true);\n\t\t\t\t\t\tdrawCircle(c + 1, r + 1, ctx, SQR, true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetAllowOutcomes(3);\n\t\t\t\t\t\tdrawX(c + 1, r + 1, ctx, SQR, false);\n\t\t\t\t\t\tdrawCircle(c + 1, r + 1, ctx, SQR, false);\n\t\t\t\t\t}\n\t\t\t\t\tcol[1] = 2;\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\t//Draw x on the board to indicate coordinate attack unavailability to the user\n\tconst drawX = (x, y, ctx, sz, shipHit) => {\n\t\tctx.beginPath();\n\t\tctx.lineWidth = 2;\n\t\t//Reason: One-fourth reduction for clean scalability while board is crowded\n\t\tctx.moveTo((x * sz) - (sz * (3 / 4)), (y * sz) - (sz * (3 / 4))); //0 + 1/4, 0 + 1/4\n\t\tctx.lineTo((x * sz) - sz / 4, (y * sz) - sz / 4); // 30 - 1/4, 30 - 1/4\n\n\t\tctx.moveTo((x * sz) - sz / 4, (y * sz) - (sz * (3 / 4))); //30 - 1/4, 0\n\t\tctx.lineTo((x * sz) - (sz * (3 / 4)), (y * sz) - sz / 4); //0, 30 - 1/4\n\t\tctx.strokeStyle = changeStrokeStyle(shipHit);\n\t\tctx.stroke();\n\t}\n\n\t//Draw circle on the board\n\tconst drawCircle = (x, y, ctx, sz, shipHit) => {\n\t\tconst centerX = (x * sz - sz) + (sz / 2);\n\t\tconst centerY = (y * sz - sz) + (sz / 2);\n\t\tconst endAngle = Math.PI + (Math.PI * x) / 2;\n\n\t\tctx.beginPath();\n\t\tctx.lineWidth = 2;\n\t\tctx.arc(centerX, centerY, sz / 3, 0, endAngle);\n\t\tctx.strokeStyle = changeStrokeStyle(shipHit);\n\t\tctx.stroke();\n\t}\n\n\tconst changeStrokeStyle = (shipHit) => {\n\t\treturn shipHit ? 'red' : 'rgb(77,166,215)';\n\t}\n\n\t//Output of canvas element\n\tconst canvasContainer = (ref, size, id, player) => {\n\t\treturn (\n\t\t\t<div className=\"base-container\">\n\t\t\t\t<div className=\"canvas-container\">\n\t\t\t\t\t{playerInfo(player)}\n\t\t\t\t\t<canvas\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\tclassName=\"cv\"\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\twidth={`${size}px`}\n\t\t\t\t\t\theight={`${size}px`}\n\t\t\t\t\t>\n\n\t\t\t\t\t</canvas>\n\t\t\t\t\t{!start && player.isHuman ? displayBeforeStartButtons(id) : null}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t//Display the current resources or state of the player\n\tconst playerInfo = (player) => {\n\t\treturn (\n\t\t\t<div className=\"player-resource-container\">\n\t\t\t\t<p>{player.displayName}</p>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t//Displays turn or final outcome for the user to see\n\tconst displayTurnOrWinner = () => {\n\t\tif (!winner) {\n\t\t\treturn (\n\t\t\t\t<p className={width > 500 ? \"display-turn\" : \"mobile-display-turn\"}>\n\t\t\t\t\t{P1.turn ? `${P1.displayName} turn` : `${P2.displayName} turn`}\n\t\t\t\t</p>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<p className={width > 500 ? \"display-victory\" : \"mobile-display-victory\"}>\n\t\t\t\t{P1.isWinner ? `${P1.displayName} wins!!` : `${P2.displayName} wins!!`}\n\t\t\t</p>\n\t\t)\n\t}\n\n\t//Possible instructions for the player or both parties.\n\tconst displayInstruction = () => {\n\t\tif (winner) return (<span>{'Game ended'}</span>);\n\t\tif ((P1.isHuman || P2.isHuman) && start) return (<span>{'Destroy the enemy\\'s ships'}</span>)\n\t\tif ((P1.isHuman || P2.isHuman) && !start) return (<span>{'Place the ships'}</span>)\n\t\tif (gamemode.value == 2 && !start) {\n\t\t\treturn (<span>{'Start the battle'}</span>)\n\t\t}\n\t\treturn (<span>{'Get some popcorn'}</span>)\n\t}\n\n\t//Buttons for gameboard property mutation\n\tconst displayBeforeStartButtons = (id) => {\n\t\treturn (\n\t\t\t<div className=\"button-container\">\n\t\t\t\t<div id=\"p1-bottom-side\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"in-game-btn\"\n\t\t\t\t\t\tid={id === 'cv1' ? 'randomize-p1' : 'randomize-p2'}\n\t\t\t\t\t\tonClick={randomizeShipLocation}\n\t\t\t\t\t>\n\t\t\t\t\t\tRandomize\n\t\t\t\t\t</button>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"in-game-btn\"\n\t\t\t\t\t\tid={id === 'cv1' ? 'tglVsb-p1' : 'tglVsb-p2'}\n\t\t\t\t\t\tonClick={toggleShipVisibility}\n\t\t\t\t\t>\n\t\t\t\t\t\tToggle visibility\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tconst displayUpperButtons = () => {\n\t\treturn (\n\t\t\t<div id=\"upper-button-container\">\n\t\t\t\t<button\n\t\t\t\t\tonClick={!start ? handleStartButton : HandleRestartButton}\n\t\t\t\t>\n\t\t\t\t\t{!start ? <i className=\"fas fa-play\"></i> : <i className=\"fas fa-redo-alt\"></i>}\n\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tid=\"outcome-visibility-button\"\n\t\t\t\t\tonClick={handleVisibilityButton}\n\t\t\t\t>\n\t\t\t\t\t{outcomesVisibility ? <i className=\"fas fa-eye\"></i> : <i className=\"fas fa-eye-slash\"></i>}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t)\n\t}\n\n\t//Initial render of empty gameboard\n\tuseEffect(() => {\n\t\tconst cv1 = cv1Ref.current;\n\t\tconst cv2 = cv2Ref.current;\n\t\tconst ctx1 = cv1.getContext('2d');\n\t\tconst ctx2 = cv2.getContext('2d');\n\t\tdrawBoard(ctx1, SIZE, P1);\n\t\tdrawBoard(ctx2, SIZE, P2);\n\t}, [toggleP1ShipVisibility, toggleP2ShipVisibility])\n\n\t//Main side-effects of present gameplay\n\tuseEffect(() => {\n\t\tconst cv1 = cv1Ref.current;\n\t\tconst cv2 = cv2Ref.current;\n\t\tconst ctx1 = cv1.getContext('2d');\n\t\tconst ctx2 = cv2.getContext('2d');\n\t\tconst sz = SIZE * 0.1;\n\n\t\t//Feature availability: to track the current coordinates demanded with mouse event\n\t\tconst getCursorPosition = (attacker, defender, cvs, event) => {\n\t\t\tconst rect = cvs.getBoundingClientRect();\n\t\t\tconst x = event.clientX - rect.left;\n\t\t\tconst y = event.clientY - rect.top;\n\t\t\treturn playerAttack(attacker, defender, Math.round((x - sz / 2) / sz), Math.round((y - sz / 2) / sz));\n\t\t}\n\n\t\tconst humanAttack = (attacker, defender, cv, ctx) => {\n\t\t\tfunction handler(e) {\n\t\t\t\tconst attackedPosition = getCursorPosition(attacker, defender, cv, e);\n\t\t\t\tif (attackedPosition) {\n\t\t\t\t\tsetFakeCount(fakeCount + 1);\n\t\t\t\t\tcv.removeEventListener('mousedown', handler);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsimulateBattleship(ctx, SIZE, defender);\n\t\t\t\tsetCurrent({\n\t\t\t\t\tturn: defender.playerNum,\n\t\t\t\t\tisHuman: defender.isHuman\n\t\t\t\t});\n\t\t\t\tcv.removeEventListener('mousedown', handler);\n\t\t\t}\n\t\t\tif (attacker.turn && start) {\n\t\t\t\tLM.add(cv, 'mousedown', handler);\n\t\t\t}\n\t\t}\n\n\t\t//Allow the human players to choose a coordinates to attack\n\t\tconst startHumanAttack = () => {\n\t\t\t//Conditionally apply event listener\n\t\t\thumanAttack(P1, P2, cv2, ctx2);\n\t\t\thumanAttack(P2, P1, cv1, ctx1);\n\t\t}\n\n\t\t//start the round\n\t\tconst startAiAttack = () => {\n\t\t\tif (P1.turn) {\n\t\t\t\tautoBattle(P1, P2);\n\t\t\t\tsimulateBattleship(ctx2, SIZE, P2);\n\t\t\t\tsetCurrent({\n\t\t\t\t\tturn: P2.playerNum,\n\t\t\t\t\tisHuman: P2.isHuman\n\t\t\t\t});\n\t\t\t} else if (P2.turn) {\n\t\t\t\tautoBattle(P1, P2);\n\t\t\t\tsimulateBattleship(ctx1, SIZE, P1);\n\t\t\t\tsetCurrent({\n\t\t\t\t\tturn: P1.playerNum,\n\t\t\t\t\tisHuman: P1.isHuman\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t//Delay attack\n\t\tasync function attackDelay(ms) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tstartAiAttack();\n\t\t\t}, ms)\n\t\t\treturn;\n\t\t}\n\n\t\t//check which player is the current turn\n\t\tasync function checkCurrentPlayerTurn() {\n\t\t\tif (P1.isWinner || P2.isWinner) {\n\t\t\t\tsetWinner(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t//Check if current player (by turn) is an ai then proceeds\n\t\t\tif (!current.isHuman) {\n\t\t\t\tawait attackDelay(1100);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tstartHumanAttack();\n\t\t\treturn;\n\t\t}\n\t\tconst startGame = () => {\n\t\t\tif (start && !winner) {\n\t\t\t\tcheckCurrentPlayerTurn();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tstartGame();\n\t\treturn (() => {\n\t\t\tclearTimeout(attackDelay);\n\t\t})\n\t}, [current, start, fakeCount])\n\n\treturn (\n\t\t<div id=\"Battle\">\n\t\t\t<div id=\"upper-container\">\n\t\t\t\t<ReturnToMenu />\n\t\t\t\t<div id=\"instructions-wrapper\">\n\t\t\t\t\t{displayInstruction()}\n\t\t\t\t</div>\n\t\t\t\t{displayUpperButtons()}\n\t\t\t</div>\n\t\t\t{(P1 !== null || P2 !== null) && width <= 500 ? displayTurnOrWinner() : null}\n\t\t\t<div id=\"main-battle\">\n\t\t\t\t{canvasContainer(cv1Ref, SIZE, \"cv1\", P1)}\n\t\t\t\t{(P1 !== null || P2 !== null) && width > 500 ? displayTurnOrWinner() : null}\n\t\t\t\t{canvasContainer(cv2Ref, SIZE, \"cv2\", P2)}\n\t\t\t</div>\n\t\t\t{outcomesVisibility ? enablePrintOutcomes() : null}\n\t\t</div>\n\t)\n}\n","import React from 'react';\n\nexport default function Settings({ setGamemode, gamemode, difficulty, setDifficulty }) {\n\tconst handleGamemodeChange = (event) => {\n\t\tsetGamemode({ value: event.target.value });\n\t}\n\tconst handleDifficultyChange = (event) => {\n\t\tif (event.target.id.includes(2) || gamemode.value == 1) {\n\t\t\tsetDifficulty({ ...difficulty, value: event.target.value, valB: event.target.value });\n\t\t\treturn;\n\t\t}\n\t\tsetDifficulty({ ...difficulty, value: event.target.value, valA: event.target.value });\n\t}\n\treturn (\n\t\t<div id=\"Settings\">\n\t\t\t<div className=\"custom-select\">\n\t\t\t\t<select name=\"gamemodes\" value={gamemode.value} onChange={handleGamemodeChange}>\n\t\t\t\t\t<option value='0'>PvP</option>\n\t\t\t\t\t<option value='1'>PvAI</option>\n\t\t\t\t\t<option value='2'>AIvAI</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\n\t\t\t{/* Difficulty option for AI as Player1 or AI as both parties */}\n\t\t\t{gamemode.value == 2 ?\n\t\t\t\t<ShowSelectDifficulty\n\t\t\t\t\tgamemode={gamemode}\n\t\t\t\t\tdifficulty={difficulty}\n\t\t\t\t\tid={1}\n\t\t\t\t\thandleDifficultyChange={handleDifficultyChange}\n\t\t\t\t/> : null}\n\t\t\t{gamemode.value != 0 ?\n\t\t\t\t<ShowSelectDifficulty\n\t\t\t\t\tgamemode={gamemode}\n\t\t\t\t\tdifficulty={difficulty}\n\t\t\t\t\tid={2}\n\t\t\t\t\thandleDifficultyChange={handleDifficultyChange}\n\t\t\t\t/> : null}\n\t\t</div>\n\t)\n}\n\nconst ShowSelectDifficulty = ({ gamemode, difficulty, id, handleDifficultyChange }) => {\n\treturn (\n\t\t<div className=\"custom-select\">\n\t\t\t<select name=\"diff\" value={gamemode == 1 || id == 2 ? difficulty.valB : difficulty.valA} id={`ai-diff${id}`} onChange={handleDifficultyChange}>\n\t\t\t\t<option value='1'>{gamemode.value == 1 || id == 1 ? 'AI: Easy' : 'AI 2: Easy'}</option>\n\t\t\t\t<option value='2'>{gamemode.value == 1 || id == 1 ? 'AI: Hard' : 'AI 2: Hard'}</option>\n\t\t\t</select>\n\t\t</div>\n\t)\n}","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport Battle from './Battle';\nimport Settings from './Settings';\nimport { setGameType } from '../scripts/main';\n\nexport default function Menu() {\n\tconst [gamemode, setGamemode] = useState({ value: '0' }); //0 = both AI, 1 = Player vs AI, 2 = PvP\n\tconst [difficulty, setDifficulty] = useState({ value: '1', valA: '1', valB: '1' });\n\treturn (\n\t\t<Router>\n\t\t\t<NavigateSwitch\n\t\t\t\tgamemode={gamemode}\n\t\t\t\tsetGamemode={setGamemode}\n\t\t\t\tdifficulty={difficulty}\n\t\t\t\tsetDifficulty={setDifficulty}\n\t\t\t/>\n\t\t</Router>\n\t)\n}\n\nfunction NavigateSwitch({\n\tgamemode,\n\tsetGamemode,\n\tdifficulty,\n\tsetDifficulty }) {\n\treturn (\n\t\t<Switch>\n\t\t\t<Route exact path=\"/react-battleship/\"\n\t\t\t\tchildren={<Home\n\t\t\t\t\tsetGamemode={setGamemode}\n\t\t\t\t\tgamemode={gamemode}\n\t\t\t\t\tdifficulty={difficulty}\n\t\t\t\t\tsetDifficulty={setDifficulty}\n\t\t\t\t/>} />\n\t\t\t<Route exact path=\"/react-battleship/battle\"\n\t\t\t\tchildren={<Battle gamemode={gamemode} difficulty={difficulty} />} />\n\t\t</Switch>\n\t)\n}\n\nfunction Home({ setGamemode, gamemode, difficulty, setDifficulty }) {\n\tuseEffect(() => {\n\t\tconst img = document.getElementById('prf');\n\t\timg.onclick = () => {\n\t\t\twindow.location.href = 'https://github.com/bvrbryn445s';\n\t\t}\n\t})\n\tuseEffect(() => {\n\t\tconst setPreparationBeforeGame = (gamemode, difficulty) => {\n\t\t\tsetGameType(parseInt(gamemode.value), parseInt(difficulty.valA), parseInt(difficulty.valB));\n\t\t}\n\t\tsetPreparationBeforeGame(gamemode, difficulty);\n\t}, [gamemode, difficulty])\n\treturn (\n\t\t<div id=\"menu\">\n\t\t\t<div className=\"title-wrapper\">\n\t\t\t\t<h1 id=\"title\" className=\"title\">Battleship</h1>\n\t\t\t\t<div className=\"author-wrapper\">\n\t\t\t\t\t<h2 className=\"divider\"> | </h2>\n\t\t\t\t\t<h5 className=\"author\">Created by B.B. Ant</h5>\n\t\t\t\t\t<div className=\"frame\">\n\t\t\t\t\t\t<img id=\"prf\" className=\"prof\" src=\"https://avatars.githubusercontent.com/u/96958013?v=4\" alt=\"profile\" />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\n\t\t\t</div>\n\t\t\t<nav id=\"nav-menu\">\n\t\t\t\t<ul>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<Link\n\t\t\t\t\t\t\t\tto=\"/react-battleship/battle\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tStart Game\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</div>\n\t\t\t\t</ul>\n\t\t\t</nav>\n\t\t\t<Settings\n\t\t\t\tsetGamemode={setGamemode}\n\t\t\t\tgamemode={gamemode}\n\t\t\t\tdifficulty={difficulty}\n\t\t\t\tsetDifficulty={setDifficulty}\n\t\t\t/>\n\t\t</div>\n\t)\n}","import './App.css';\nimport Menu from './components/Menu';\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Menu />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}