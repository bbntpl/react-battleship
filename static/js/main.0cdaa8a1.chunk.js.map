{"version":3,"sources":["Components/ReturnToMenu.jsx","Components/Outcomes.jsx","scripts/ship.js","scripts/gameboard.js","algorithms/hunt_target.js","scripts/player.js","scripts/main.js","scripts/listener_manager.js","Components/Battle.jsx","Components/Settings.jsx","Components/Menu.jsx","App.jsx","index.js"],"names":["ReturnToMenu","history","useHistory","id","onClick","push","className","Outcomes","p","currentPlayer","categoryNum","coordinate","outcomesArr","setOutcomesArr","useEffect","length","newArr","slice","addingListInArr","outcomesInListFormat","map","txt","Ship","name","health","currentState","currentHealth","isSunk","getName","getHealth","getCurrentState","hit","Gameboard","shipClasses","recentCoordinateAttackedShip","x","y","board","outerLen","innerLen","arr","i","data","j","shipInfo","String","fromCharCode","twoDimensionalArrayGenerator","occupiedPos","this","missedAtks","assignCoordinates","len","bh","n","Math","floor","random","randomNumGen","n1","round","n2","betweenTwoNumbers","xy","validateCoordinates","addShipsToTheBoard","obj","pos","ship","some","o","shipsOnTheBoard","currentTotalShips","checkShipState","isShipGotHit","ships","removeCurrentOccupiedPosIfHit","forEach","splice","concat","resetArray","pop","resetBoard","rw","cl","receiveAttack","getRecentCoordinate","getOccupiedPos","getCurrentTotalShips","huntTarget","moves","firstHuntAtk","setFirstHunt","sameShipHuntShot","setSameShipHuntShot","availableTargetShots","setAvailableTargetShots","posNum","recentSunk","setRecentSunk","move","console","log","index","checkIfThereAreNoPossibleAttacks","prevShots","Array","isArray","m","step","availableTargetShot","nextShot","attackRef","target","axis","prevShot","shot","findIndex","generateTargetShot","atkRef","refillAvailableShots","nextIndex","targetPhase","recentTargetShots","transitionToTargetMode","Player","initialTurn","player","difficulty","num","turn","isHuman","playerNum","displayName","AILEVEL","gameboard","opponentOccupiedPosLeft","randomPlays","max","aiLegalAtks","bool","val","togglePlayerTurn","aiMove","selectedAtk","isWinner","toggleLegality","atk","refillLegalAtks","getAiLegalAtks","setAiLegalAtks","setOpponentOccupiedPosLeft","Player1","Player2","gamemode","p1diff","p2diff","a","toggleTurnForBothPlayers","p1","p2","checkWinner","P1","P2","autoBattle","AIAttack","attacker","defender","prevShipsLeft","randomize","resetGame","newLegalShots","ListenerManager","listeners","nextId","add","elem","args","addEventListener","addListener","call","Error","remove","listener","removeEventListener","removeListener","removeAll","old","Object","keys","Battle","width","window","innerWidth","SIZE","useState","winner","setWinner","start","setStart","outcomesVisibility","setOutcomesVisibility","current","setCurrent","fakeCount","setFakeCount","LM","cv1Ref","useRef","cv2Ref","toggleP1ShipVisibility","setToggleP1ShipVisibility","toggleP2ShipVisibility","setToggleP2ShipVisibility","allowOutcomes","setAllowOutcomes","setCoordinate","handleStartButton","value","handleVisibilityButton","setPlayerAsStates","Promise","resolve","setTimeout","resetStates","HandleRestartButton","cv1","cv2","ctx1","getContext","ctx2","clearRect","height","drawBoard","randomizeShipLocation","e","toggleShipVisibility","includes","drawSquare","ctx","sz","fillStyle","fillRect","strokeStyle","strokeRect","drawShip","direction","SQR","row","r","col","c","filter","visualizeBoardForAIvsAI","simulateBattleship","recentAttackedPos","drawX","drawCircle","shipHit","beginPath","lineWidth","moveTo","lineTo","changeStrokeStyle","stroke","centerX","centerY","endAngle","PI","arc","canvasContainer","ref","size","playerInfo","displayBeforeStartButtons","displayTurnOrWinner","getCursorPosition","cvs","event","rect","getBoundingClientRect","clientX","left","clientY","top","playerAttack","humanAttack","cv","handler","startHumanAttack","startAiAttack","attackDelay","ms","checkCurrentPlayerTurn","clearTimeout","Settings","setGamemode","setDifficulty","handleDifficultyChange","valB","valA","onChange","ShowSelectDifficulty","Menu","NavigateSwitch","exact","path","children","Home","document","getElementById","onclick","location","href","setGameType","parseInt","setPreparationBeforeGame","src","alt","to","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0cdaa8a1.chunk.js","sourcesContent":["import { useHistory } from 'react-router-dom'\n\nexport default function ReturnToMenu() {\n    const history = useHistory();\n\n    function handleClick() {\n        history.push('/battleship/');\n    }\n    return (\n        <li id=\"Return\" onClick={handleClick}>\n            <i className=\"fas fa-arrow-circle-left\"></i>\n            Return to Menu\n        </li>\n    )\n}","import React, { useEffect } from 'react';\n\nexport default function Outcomes({\n    p,\n    currentPlayer,\n    categoryNum,\n    coordinate,\n    outcomesArr,\n    setOutcomesArr}) {\n\n    useEffect(() => {\n        const addingListInArr = () => {\n            if(categoryNum === null) return;\n            switch (categoryNum) {\n                case 2:\n                    outcomesArr.push(\n                        `${currentPlayer} successfully hit an attack at ${coordinate}.`\n                    )\n                    break;\n                case 3:\n                    outcomesArr.push(\n                        `${currentPlayer} missed an attack at ${coordinate}.`\n                    )\n                    break;\n                default:\n                    break;\n            }\n        }\n        if (outcomesArr.length > 5) {\n            const newArr = outcomesArr.slice(1);\n            setOutcomesArr(newArr);\n        }\n        addingListInArr();\n    }, [p, currentPlayer, outcomesArr, coordinate]);\n    const outcomesInListFormat =  outcomesArr.map((txt, id)=> {\n            return (\n                <li key={id}>\n                    {txt}\n                </li>\n            );\n        })\n    return (\n        <ul id=\"Outcomes\">\n            {outcomesInListFormat}\n        </ul>\n    )\n}\n","const Ship = (name, health) => { //health and length are synonymous based on the inherent logic and rule of this game\n    let currentState = 'safe'; // three state: safe, hit, sunk\n    let currentHealth = health;\n    const getName = () => name;\n    const getHealth= () => currentHealth;\n    const getCurrentState = () => currentState;\n    const isSunk = () => {\n        return currentHealth === 0 ? currentState = 'sunk' : null;\n    }\n    const hit = () => {\n        currentHealth -= 1;\n        currentState = 'hit';\n        isSunk();\n    };\n    return {\n        getName,\n        getHealth,\n        getCurrentState,\n        hit,\n        isSunk,\n    }\n}\n\nexport default Ship;","import Ship from './ship'\n\nexport default function Gameboard() {\n    const height = 10; //immutable board height\n    const width = 10; //mutable board width\n    //default sets of ships\n    const shipClasses = [\n        ['Carrier', 5],\n        ['Battleship', 4],\n        ['Cruiser', 3],\n        ['Submariner', 3],\n        ['Destroyer', 2]\n    ]\n    let recentCoordinateAttackedShip = { x: -15, y: -15 };\n    const twoDimensionalArrayGenerator = (outerLen, innerLen) => {\n        let arr = [];\n        for (let i = 0; i < outerLen; i++) {\n            let data = [];\n            for (let j = 0; j < innerLen; j++) {\n                let shipInfo = [];\n                //name coordinate for the board e.g arr[0][7][0] would be A7\n                shipInfo.push(`${String.fromCharCode(65 + i)}${j + 1}`, 0)\n                data.push(shipInfo);\n            }\n            arr.push(data);\n        }\n        return arr;\n    }\n    const betweenTwoNumbers = (x) => { return x > 0.5 ? 0 : 1; }\n\n    const board = twoDimensionalArrayGenerator(height, width); //A 2d array-ish for coodinations\n    const resetArray = (arr) => {\n        while (arr.length > 0) {\n            arr.pop();\n        }\n    }\n    const randomNumGen = (len) => { //\n        const n = (width - len);\n        return Math.floor(Math.random() * n) + 1;\n    }\n    const occupiedPos = []; //occupied coordinate positions -- tracks what is available or not\n    function coordinate(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    let missedAtks = [];\n   \n    //assign coordinates to a ship\n    const assignCoordinates = (len, bh) => {\n        let arr = [];\n        let isCoordinatesTaken = false;\n        const x = randomNumGen(len); //results to an integer between 0 and (h/w - length of ship)\n        const y = Math.floor(Math.random() * bh); //output would be integer between 0 and 9\n        const n1 = Math.round(Math.random()); //between 0 and 1\n        const n2 = betweenTwoNumbers(n1); //return 0 or 1 opposed to the output of n1\n        for (let i = 0; i < len; i++) {\n            const xy = [x + i, y];\n            arr.push(new coordinate(xy[n1], xy[n2]));\n        }\n        isCoordinatesTaken = validateCoordinates(x, y, len, n1);\n        //call this function again when the coordinate is taken, otherwise, proceed to the process\n        if (isCoordinatesTaken === true) {\n            return assignCoordinates(len, bh) //restart the function\n        }\n        return arr;\n    }\n\n    //add the ships and its coordinates to the ship holder\n    const addShipsToTheBoard = () => {\n        const obj = [];\n        for (let i = 0; i < shipClasses.length; i++) {\n            const name = shipClasses[i][0];\n            const length = shipClasses[i][1];\n            const pos = assignCoordinates(length, height);\n            occupiedPos.push(...pos);\n            const ship = Ship(name, length);\n            obj.push({\n                ship: ship,\n                pos: pos,\n            });\n        }\n        return obj;\n    }\n\n    //check whether the following coordinates existed already\n    const validateCoordinates = (x, y, len, n1) => {\n        if (occupiedPos.length === 0) { return false; }\n        return occupiedPos.some(o => n1 === 0 ? (o.x >= x && o.x <= x + len) && o.y === y : (o.y >= x && o.y <= x + len) && o.x === y);\n    }\n\n    const resetBoard = () => {\n        board.map(rw => {\n            rw.map(cl => {\n                cl[1] = 0;\n            })\n        })\n    }\n    //An array to keep the ship factories and its board positions\n    const shipsOnTheBoard = addShipsToTheBoard();\n    let currentTotalShips = shipsOnTheBoard.length;\n\n    //check if all ships are gone or not\n    const isAllShipsGone = () => {\n        return currentTotalShips === 0 ? 1 : 0;\n    }\n\n    //Either sunk or not sunk\n    const checkShipState = (ship) => {\n        if (ship.ship.getCurrentState() === 'sunk') {\n            currentTotalShips -= 1;\n        }\n    }\n\n    const receiveAttack = (x, y, ships) => {\n        if (x > height && y > height) {\n            return;\n        }\n        if (!board[x][y][1]) {\n            board[x][y][1] = 1 - board[x][y][1];\n            const attackMissed = isShipGotHit(x, y, ships);\n            if (attackMissed === true) {\n                missedAtks.push({\n                    x: x,\n                    y: y\n                })\n            }\n        }\n        isAllShipsGone();\n    }\n\n    const isShipGotHit = (x, y, ships) => {\n        for (const ship of ships) {\n            for (const pos of ship.pos) {\n                if (pos.x === x && pos.y === y) {\n                    ship.ship.hit(); //degrade the quality of the ship by decrementing it's health\n                    checkShipState(ship); //check it's state whether it's still floating or sunk\n                    removeCurrentOccupiedPosIfHit(occupiedPos, x, y); //remove from current occupied positions\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    const removeCurrentOccupiedPosIfHit = (arr, x, y) => {\n        arr.forEach((pos, i) => {\n            if (pos.x === x && pos.y === y) {\n                //remove occupied position using a specified coordinates chosen by user\n                const hit = arr.splice(i, 1);\n                recentCoordinateAttackedShip = hit[0];\n                return [].concat(...hit);\n            }\n        });\n    }\n\n    //get mutable variables\n    const getOccupiedPos = () => { return occupiedPos; }\n    const getCurrentTotalShips = () => { return currentTotalShips; }\n    const getRecentCoordinate = () => { return recentCoordinateAttackedShip; }\n    return {\n        shipsOnTheBoard,\n        addShipsToTheBoard,\n        board,\n        resetArray,\n        resetBoard,\n        currentTotalShips,\n        missedAtks,\n        receiveAttack,\n        occupiedPos,\n        getRecentCoordinate,\n        getOccupiedPos,\n        getCurrentTotalShips\n    }\n}\n\n","//Known as Hunt and Target Attack or King's move without diagonal attack\n//Improved algorithm where the AI is structured a new decision system when it specifically hits a ship\n//by checking it's neighboring square at one step. When choosing the wrong square it'll return to choose\n//between the remaining neighboring squares until it hits. If ship is still alive, it'll continue to it's direction\n//which is either vertical or horizontal; diagonal is an illegal move as it requires 2 steps.\nexport default function huntTarget(\n    moves,\n    firstHuntAtk,\n    setFirstHunt,\n    sameShipHuntShot,\n    setSameShipHuntShot,\n    availableTargetShots,\n    setAvailableTargetShots,\n    posNum,\n    recentSunk,\n    setRecentSunk\n) {\n\n    console.log(moves.length);\n    let move;     //This is the chosen move after the process of choosing possible attacks\n    let index = Math.floor(Math.random() * moves.length - 1);\n\n    const random = (arr) => {\n        const i = Math.floor(Math.random() * arr.length);\n        return arr.splice(i, 1);\n    }\n    const checkIfThereAreNoPossibleAttacks = (arr, prevShots) => {\n        if(prevShots.length === 0) return false;\n        //m => reference for array element\n        //step => is either 1, -1 which is used for neighboring square attacks\n        if(Array.isArray(prevShots[0])){    \n            for ( let i = prevShots.length - 1; i >= 0 ; i--){\n                const x = (m, step) =>  m[0] === prevShots[i][0] + step;\n                const y = (m, step) =>  m[1] === prevShots[i][1] + step;\n                const findIfAttacksArePossible = (m) => (x(m, 1) && y(m, 0)) || (x(m, -1) && y(m, 0)) \n                || (x(m, 0) && y(m, 1)) || (x(m, 0) && y(m, -1));\n                if(arr.some(findIfAttacksArePossible)){\n                    return true;\n                } else {\n                    prevShots.splice(i, 1);\n                }\n            }\n        } else {\n            const x = (m, step) =>  m[0] === prevShots[0] + step;\n            const y = (m, step) =>  m[1] === prevShots[1] + step;\n            const findIfAttacksArePossible = (m) => (x(m, 1) && y(m, 0)) || (x(m, -1) && y(m, 0)) \n            || (x(m, 0) && y(m, 1)) || (x(m, 0) && y(m, -1));\n            return arr.some(findIfAttacksArePossible);\n        }\n\n    }\n\n    //The moves, chosen next attack or attack to be referenced\n    //3rd arg refers to the center of the possibilities during the target mode\n    const availableTargetShot = (arr, nextShot, attackRef) => {\n        if(attackRef === null) return index;\n        const target = nextShot.target;\n        const axis = nextShot.axis;\n        const prevShot =  attackRef ? sameShipHuntShot[sameShipHuntShot.length - 1] : firstHuntAtk;\n        const isNextShotAvailable = (m) => axis === 'y' ? m[1] === prevShot[1] + target && m[0] === prevShot[0]\n            : m[0] === prevShot[0] + target && m[1] === prevShot[1];\n        const shot = arr.findIndex(isNextShotAvailable);\n        if (shot === -1) { return generateTargetShot(arr); }\n        return shot;\n    }\n    const generateTargetShot = (arr) => {\n        //const chooseBetweenFirstOrRecentAtk = firstHuntAtk !== sameShipHuntShot && sameShipHuntShot !== null;\n        let atkRef = false;\n        if (checkIfThereAreNoPossibleAttacks(moves, firstHuntAtk)) {\n            atkRef = false;\n        } else if(checkIfThereAreNoPossibleAttacks(moves, sameShipHuntShot)){\n            atkRef = true;\n        } \n        else if (!sameShipHuntShot.length) {\n            atkRef = null;\n        }\n        \n        let nextShot = random(availableTargetShots);\n        return availableTargetShot(arr, ...nextShot, atkRef);\n    }\n\n    //Target mode is activated\n    function targetPhase() {\n        if (firstHuntAtk !== null) {\n            const nextIndex = generateTargetShot(moves);\n            move = moves.splice(nextIndex, 1);\n    \n        } else { //Just the normal random attack\n            move = moves.splice(index, 1);\n        }\n    }\n\n\n    function refillAvailableShots() {\n        if(availableTargetShots.length===0){\n            setSameShipHuntShot(firstHuntAtk);\n        }\n        setAvailableTargetShots([\n            {\n                target: 1,\n                axis: 'x',\n            },\n            {\n                target: -1,\n                axis: 'x',\n            },\n            {\n                target: 1,\n                axis: 'y',\n            },\n            {\n                target: -1,\n                axis: 'y',\n            }\n        ]);\n    }\n    \n    function transitionToTargetMode() {\n        if (firstHuntAtk === null && posNum.some(m => m.x === move[0][0] && m.y === move[0][1])) {\n            setFirstHunt(...move);\n        } else if (firstHuntAtk !== null && posNum.some(m => m.x === move[0][0] && m.y === move[0][1])) {\n            const recentTargetShots =  sameShipHuntShot;\n            recentTargetShots.push(...move);\n            setSameShipHuntShot(recentTargetShots);\n        } \n        refillAvailableShots();\n        setSameShipHuntShot(sameShipHuntShot);\n    }\n\n    function transitionToHuntMode() {\n        if (recentSunk) {\n            setFirstHunt(null);\n            setRecentSunk(!recentSunk);\n            refillAvailableShots();\n        }\n    }\n\n    //Sequential step of this algorithm\n    transitionToHuntMode();\n    targetPhase();\n    transitionToTargetMode();\n    return [].concat(...move);\n}","import Gameboard from './gameboard';\nimport huntTarget from '../algorithms/hunt_target';\n\nexport default function Player(initialTurn, player, difficulty, num) {\n    let turn = initialTurn;\n    const isHuman = player; //Purpose: to avoid configure the wrong subject\n    const playerNum = num;\n    const displayName = isHuman ? 'Player' : 'AI'; //To identify which party is which\n    let isWinner = false; //Determine the winner\n\n    //Only applies to AI\n    const AILEVEL = difficulty; // 1 or 2\n    const randomNum = (n) => {\n        return Math.floor(Math.random() * n);\n    }\n    const gameboard = Gameboard();\n    let opponentOccupiedPosLeft = 17;\n\n    //Use to iterate coordinates to be used as a legal attack for AI\n    const randomPlays = (max) => {\n        const newArr = [];\n        for (let i = 0; i < max; i++) {\n            for (let j = 0; j < max; j++) {\n                newArr.push([i, j]);\n            };\n        };\n        return newArr;\n    }\n\n    const selectedAtk = (x, y) => {\n        return [x, y];\n    }\n    //array of legal attacks - used by an AI\n    let aiLegalAtks = randomPlays(10);\n    let recentSunk = false;\n    function setRecentSunk(bool) { recentSunk = bool; }\n\n    //Special variable for Player(AI) with higher difficulty\n    let firstHuntAtk = null; \n    let sameShipHuntShot = [];\n    function setFirstHunt(val) { firstHuntAtk = val; }\n    function setSameShipHuntShot(val) { sameShipHuntShot = val; }\n    let availableTargetShots = [\n        {\n            target: 1,\n            axis: 'x',\n        },\n        {\n            target: -1,\n            axis: 'x',\n        },\n        {\n            target: 1,\n            axis: 'y',\n        },\n        {\n            target: -1,\n            axis: 'y',\n        }\n    ]\n    function setAvailableTargetShots(arr) {\n        availableTargetShots = arr;\n    }\n\n    const refillLegalAtks = () => {\n        return randomPlays(10);\n    }\n\n    const toggleLegality = (x, y) => {\n        const index = aiLegalAtks.findIndex(atk => atk[0] === x & atk[1] === y);\n        aiLegalAtks.splice(index, 1);\n    }\n\n    //AI move algorithm\n    const aiMove = (moves) => {\n        if (moves.length !== 0) {\n            if (AILEVEL == 2) {\n                return huntTarget(\n                    moves,\n                    firstHuntAtk,\n                    setFirstHunt,\n                    sameShipHuntShot,\n                    setSameShipHuntShot,\n                    availableTargetShots,\n                    setAvailableTargetShots,\n                    opponentOccupiedPosLeft,\n                    recentSunk,\n                    setRecentSunk\n                    );\n            }\n            const move = moves.splice(randomNum(moves.length - 1), 1);\n            return [].concat(...move);\n        }\n    }\n\n    const togglePlayerTurn = (turn) => { return !turn; }\n    return {\n        gameboard,\n        turn,\n        togglePlayerTurn,\n        aiMove,\n        aiLegalAtks,\n        recentSunk,\n        opponentOccupiedPosLeft,\n        selectedAtk,\n        isWinner,\n        isHuman,\n        displayName,\n        toggleLegality,\n        refillLegalAtks,\n        playerNum,\n        getAiLegalAtks() { return aiLegalAtks; },\n        setAiLegalAtks(arr) { aiLegalAtks = arr; },\n        setOpponentOccupiedPosLeft(val) { opponentOccupiedPosLeft = val; },\n        setRecentSunk\n    }\n}","import Player from './player'; //arguments = (initialTurn,isHuman,difficulty -> 1 for easy and 2 for hard, otherwise null if player)\n\n//Initial creation of player objects\nexport let Player1 = Player(true, true, 1, 1);\nexport let Player2 = Player(false, false, 1, 2);\n\n//Set the gamemode including the AI difficulty\nexport async function setGameType(gamemode, p1diff, p2diff){\n    if (gamemode == 0) {\n        Player1 = Player(true, true, null, 1);\n        Player2 = Player(false, true, null, 2);\n        Player1.displayName = 'Player 1';\n        Player2.displayName = 'Player 2';\n    } else if (gamemode == 1) {\n        Player1 = Player(true, true, null, 1);\n        Player2 = Player(false, false, p2diff, 2);\n        Player1.displayName = 'Player';\n        Player2.displayName = 'AI';\n    } else {\n        Player1 = Player(true, false, p1diff, 1);\n        Player2 = Player(false, false, p2diff, 2);\n        Player1.displayName = 'AI 1';\n        Player2.displayName = 'AI 2';\n    }\n}\n\n//toggle turns\nexport const toggleTurnForBothPlayers = (p1, p2) => {\n    p1.turn = p1.togglePlayerTurn(p1.turn);\n    p2.turn = p2.togglePlayerTurn(p2.turn);\n}\n\n\nconst checkWinner = (P1, P2) => {\n    if (P1.gameboard.getOccupiedPos().length == 0) {\n        P2.isWinner = true;\n    } else if (P2.gameboard.getOccupiedPos().length == 0) {\n        P1.isWinner = true;\n    }\n}\n\n//Auto function for AIvsAI gamemode\nexport const autoBattle = (P1, P2) => {\n    AIAttack(P1, P2);\n    AIAttack(P2,P1);\n    checkWinner(P1, P2);\n    toggleTurnForBothPlayers(P1, P2);\n}\n\nconst AIAttack = (attacker, defender) => {\n    if (attacker.turn) {\n        attacker.setOpponentOccupiedPosLeft(defender.gameboard.getOccupiedPos());\n        const prevShipsLeft = defender.gameboard.getCurrentTotalShips();\n        const atk = attacker.aiMove(attacker.aiLegalAtks);\n        const ships = defender.gameboard.shipsOnTheBoard;\n        defender.gameboard.receiveAttack(atk[0], atk[1], ships);\n\n        if(prevShipsLeft !== defender.gameboard.getCurrentTotalShips()){\n            attacker.setRecentSunk(true);\n        }\n    } \n}\n\n//Attack the ships of the other party\nexport const playerAttack = (attacker, defender, x, y) => {\n    const shots = attacker.getAiLegalAtks();\n    if(!shots.some(o => o[0] === x && o[1] === y)) return true;\n    const ships = defender.gameboard.shipsOnTheBoard;\n    attacker.toggleLegality(x,y);\n    defender.gameboard.receiveAttack(y, x, ships);\n    checkWinner(Player1, Player2);\n    toggleTurnForBothPlayers(Player1, Player2);\n    return false;\n}\n\nexport const randomize = (player) => {\n    const p = player.gameboard;\n    p.resetArray(p.occupiedPos);\n    p.shipsOnTheBoard = p.addShipsToTheBoard();\n}\n\nexport const resetGame = (player) => {\n    randomize(player);\n    if (player.isWinner) { player.isWinner = false; }\n    player.gameboard.resetBoard();\n    const newLegalShots =  player.refillLegalAtks();\n    if(!player.isHuman){\n        player.aiLegalAtks = newLegalShots;\n        return;\n    }\n    player.setAiLegalAtks(newLegalShots);\n}\n","export default function ListenerManager() {\n    let listeners = {};\n    let nextId = 1;\n    // Returns an id for the listener.\n    this.add = (elem, ...args) => {\n      (elem.addEventListener || elem.add || elem.addListener).call(elem, ...args);\n      const id = nextId++;\n      listeners[id] = {\n        elem: elem,\n        args: args,\n      };\n      if (args.length < 2) {\n        throw new Error('too few args');\n      }\n      return id;\n    };\n  \n    //removes a specific listener using ID\n    this.remove = (id) => {\n      const listener = listeners[id];\n      if (listener) {\n        delete listener[id];\n        const elem = listener.elem;\n        (elem.removeEventListener || elem.removeListener).call(elem, ...listener.args);\n      }\n    };\n  \n    this.removeAll = () => { //removes each existing listeners\n      const old = listeners;\n      listeners = {};\n      Object.keys(old).forEach((id) => {\n        const listener = old[id];\n        if (listener.args < 2) {\n          throw new Error('too few args');\n        }\n        const elem = listener.elem;\n        (elem.removeEventListener || elem.removeListener).call(elem, ...listener.args);\n      });\n    };\n  }","import React, { useState, useEffect, useRef } from 'react';\n\nimport ReturnToMenu from './ReturnToMenu';\nimport Outcomes from './Outcomes';\nimport { Player1, Player2, autoBattle, randomize, playerAttack, resetGame, toggleTurnForBothPlayers } from '../scripts/main'\n\nimport ListenerManager from '../scripts/listener_manager'\n\nexport default function Battle({ gamemode, difficulty }) {\n    //STATES\n    //viewport width used for canvas size\n    const width = window.innerWidth;\n\n    //Immutable and conditionally-based variable\n    const SIZE = width < 600 ? width * .60 : width * .20;\n\n    //Player factory function as a state\n    const [P1,] = useState(Player1);\n    const [P2,] = useState(Player2);\n    const [outcomesArr, setOutcomesArr] = useState([]);\n\n    //Used to manually start and end the game\n    const [winner, setWinner] = useState(false);\n    const [start, setStart] = useState(false);\n    const [outcomesVisibility, setOutcomesVisibility] = useState(false);\n\n    //Set the current player\n    const [current, setCurrent] = useState({ turn: 1, isHuman: Player1.isHuman });\n\n    //Used as a fake count to trigger an associated useEffect as a dependency value\n    const [fakeCount, setFakeCount] = useState(0);\n\n    //Event listeners\n    const LM = new ListenerManager();\n\n    //Canvas stuff\n    const cv1Ref = useRef(null);\n    const cv2Ref = useRef(null);\n\n    const [toggleP1ShipVisibility, setToggleP1ShipVisibility] = useState(true);\n    const [toggleP2ShipVisibility, setToggleP2ShipVisibility] = useState(true);\n    const [allowOutcomes, setAllowOutcomes] = useState(null);\n    const [coordinate, setCoordinate] = useState(null);\n\n    //Triggered after a click on start button\n    const handleStartButton = () => {\n        if (!start && gamemode.value == 0) {\n            setToggleP1ShipVisibility(false);\n            setToggleP2ShipVisibility(false);\n        }\n        setStart(!start);\n        setOutcomesArr(['The game has started...']);\n    }\n\n    const handleVisibilityButton = () => {\n        setOutcomesVisibility(!outcomesVisibility);\n    }\n\n    //Reset all the propety of palyer and gameboard functions to initial state\n    function setPlayerAsStates() {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resetGame(P1);\n                resetGame(P2);\n                resolve('resolved');\n            }, 200);\n        });\n    }\n\n    const resetStates = () => {\n        setStart(!start);\n        setWinner(false);\n        setAllowOutcomes(null);\n        setCurrent({\n            turn: 1,\n            isHuman: P1.isHuman\n        })\n        LM.removeAll();\n    }\n\n    //Reset all states to initial value\n    async function HandleRestartButton() {\n        const cv1 = cv1Ref.current;\n        const cv2 = cv2Ref.current;\n        const ctx1 = cv1.getContext('2d');\n        const ctx2 = cv2.getContext('2d');\n        ctx1.clearRect(0, 0, cv1.width, cv1.height);\n        ctx2.clearRect(0, 0, cv2.width, cv2.height);\n        if (start) {\n            if (!P1.turn) {\n                toggleTurnForBothPlayers(P1, P2);\n            }\n            await setPlayerAsStates();\n            drawBoard(ctx1, SIZE, P1);\n            drawBoard(ctx2, SIZE, P2);\n            resetStates();\n        }\n    }\n\n    const randomizeShipLocation = (e) => {\n        const cv1 = cv1Ref.current;\n        const cv2 = cv2Ref.current;\n        const ctx1 = cv1.getContext('2d');\n        const ctx2 = cv2.getContext('2d');\n        if (e.target.id === 'randomize-p1') {\n            randomize(P1);\n            drawBoard(ctx1, SIZE, P1);\n            return;\n        }\n        randomize(P2);\n        drawBoard(ctx2, SIZE, P2);\n    }\n    const toggleShipVisibility = (e) => {\n        if (e.target.id.includes('1')) {\n            setToggleP1ShipVisibility(!toggleP1ShipVisibility);\n            return;\n        }\n        setToggleP2ShipVisibility(!toggleP2ShipVisibility);\n    }\n\n    const enablePrintOutcomes = () => {\n        return (\n            <Outcomes\n                p={P1.turn}\n                currentPlayer={P1.turn ? P2.displayName : P1.displayName}\n                categoryNum={allowOutcomes}\n                coordinate={coordinate}\n                outcomesArr={outcomesArr}\n                setOutcomesArr={setOutcomesArr}\n            />\n        )\n    }\n    //draw tiles for the board\n    const drawSquare = (x, y, ctx, sz) => {\n        ctx.fillStyle = 'rgb(7,67,114)';\n        ctx.fillRect(x * sz, y * sz, sz, sz);\n        ctx.strokeStyle = 'rgb(7,100,176)';\n        ctx.strokeRect(x * sz, y * sz, sz, sz);\n    }\n\n    const drawShip = (x, y, ctx, sz, len, direction) => {\n        ctx.fillStyle = 'rgb(224,224,224)';\n        ctx.strokeStyle = 'rgb(34,34,34)';\n        for (let i = 0; i < len; i++) {\n            direction === 0 ? ctx.fillRect(x * sz, y * sz, sz, sz * len) : ctx.fillRect(x * sz, y * sz, sz * len, sz);\n        }\n        direction === 0 ? ctx.strokeRect(x * sz, y * sz, sz, sz * len) : ctx.strokeRect(x * sz, y * sz, sz * len, sz);\n    }\n\n    //draw the game board\n    const drawBoard = (ctx, sz, player) => {\n        const SQR = sz * ((100 / 10) * 0.01); //square size of each coordinates\n        const pos = player.gameboard.shipsOnTheBoard;\n        const occupiedPos = player.gameboard.getOccupiedPos();\n        const board = player.gameboard.board;\n        board.forEach((row, r) => {\n            row.forEach((col, c) => {\n                //Auto visualize ships in AI board\n                if (!toggleP1ShipVisibility && player.turn === true) {\n                    drawSquare(c, r, ctx, SQR);\n                    return;\n                }\n                if (!toggleP2ShipVisibility && player.turn === false) {\n                    drawSquare(c, r, ctx, SQR);\n                    return;\n                }\n                if (player.isHuman && occupiedPos.filter(o => o.x === r && o.y === c).length == 1) {\n                    visualizeBoardForAIvsAI(pos, c, r, ctx, SQR);\n                    return;\n                }\n                drawSquare(c, r, ctx, SQR);\n            })\n        })\n    }\n\n    const visualizeBoardForAIvsAI = (pos, c, r, ctx, SQR) => {\n        for (const ship of pos) {\n            if (ship.pos[0].x === r && ship.pos[0].y === c) {\n                if (ship.pos[0].x === r && ship.pos[1].x === r) {\n                    drawShip(c, r, ctx, SQR, ship.pos.length, 1);\n                } else {\n                    drawShip(c, r, ctx, SQR, ship.pos.length, 0);\n                }\n            }\n        }\n    }\n\n    //draw ship placements specifically for AI\n    //Functionality during the game -> marks the attacked coordinates\n    const simulateBattleship = (ctx, sz, player) => {\n        const SQR = sz * ((100 / 10) * 0.01);\n        const board = player.gameboard.board;\n        const recentAttackedPos = player.gameboard.getRecentCoordinate();\n        board.forEach((row, r) => {\n            row.forEach((col, c) => { //0 = unattacked, 1 = recency(by 1), 2 = already marked\n                if (col[1] === 1) {\n                    setCoordinate(col[0]);\n                    if (recentAttackedPos.x === r && recentAttackedPos.y === c) {\n                        setAllowOutcomes(2);\n                        drawX(c + 1, r + 1, ctx, SQR, true);\n                        drawCircle(c + 1, r + 1, ctx, SQR, true);\n                    } else {\n                        setAllowOutcomes(3);\n                        drawX(c + 1, r + 1, ctx, SQR, false);\n                        drawCircle(c + 1, r + 1, ctx, SQR, false);\n                    }\n                    col[1] = 2;\n                }\n            })\n        })\n    }\n\n    //Draw x on the board to indicate coordinate attack unavailability to the user\n    const drawX = (x, y, ctx, sz, shipHit) => {\n        ctx.beginPath();\n        ctx.lineWidth = 2;\n        //Reason: One-fourth reduction for clean scalability while board is crowded\n        ctx.moveTo((x * sz) - (sz * (3 / 4)), (y * sz) - (sz * (3 / 4))); //0 + 1/4, 0 + 1/4\n        ctx.lineTo((x * sz) - sz / 4, (y * sz) - sz / 4); // 30 - 1/4, 30 - 1/4\n\n        ctx.moveTo((x * sz) - sz / 4, (y * sz) - (sz * (3 / 4))); //30 - 1/4, 0\n        ctx.lineTo((x * sz) - (sz * (3 / 4)), (y * sz) - sz / 4); //0, 30 - 1/4\n        ctx.strokeStyle = changeStrokeStyle(shipHit);\n        ctx.stroke();\n    }\n\n    //Draw circle on the board\n    const drawCircle = (x, y, ctx, sz, shipHit) => {\n        const centerX = (x * sz - sz) + (sz / 2);\n        const centerY = (y * sz - sz) + (sz / 2);\n        const endAngle = Math.PI + (Math.PI * x) / 2;\n\n        ctx.beginPath();\n        ctx.lineWidth = 2;\n        ctx.arc(centerX, centerY, sz / 3, 0, endAngle);\n        ctx.strokeStyle = changeStrokeStyle(shipHit);\n        ctx.stroke();\n    }\n\n    const changeStrokeStyle = (shipHit) => {\n        return shipHit ? 'red' : 'rgb(77,166,215)';\n    }\n\n    //Output of canvas element\n    const canvasContainer = (ref, size, id, player) => {\n        return (\n            <div className=\"base-container\">\n                <div className=\"canvas-container\">\n                    {playerInfo(player)}\n                    <canvas\n                        ref={ref}\n                        className=\"cv\"\n                        id={id}\n                        width={`${size}px`}\n                        height={`${size}px`}\n                    >\n\n                    </canvas>\n                    {!start && player.isHuman ? displayBeforeStartButtons(id) : null}\n                </div>\n            </div>\n        )\n    }\n\n    //Display the current resources or state of the player\n    const playerInfo = (player) => {\n        return (\n            <div className=\"player-resource-container\">\n                <p>{player.displayName}</p>\n            </div>\n        )\n    }\n\n    //Displays turn or final outcome for the user to see\n    const displayTurnOrWinner = () => {\n        if (!winner) {\n            return (\n                <p className={width > 500 ? \"display-turn\" : \"mobile-display-turn\"}>\n                    {P1.turn ? `${P1.displayName} turn` : `${P2.displayName} turn`}\n                </p>\n            )\n        }\n        return (\n            <p className={width > 500 ? \"display-victory\" : \"mobile-display-victory\"}>\n                {P1.isWinner ? `${P1.displayName} wins!!` : `${P2.displayName} wins!!`}\n            </p>\n        )\n    }\n\n    //Possible instructions for the player or both parties.\n    const displayInstruction = () => {\n        if (winner) return (<span>{'Game ended'}</span>);\n        if ((P1.isHuman || P2.isHuman) && start) return (<span>{'Destroy the enemy\\'s ships'}</span>)\n        if ((P1.isHuman || P2.isHuman) && !start) return (<span>{'Place the ships'}</span>)\n        if (gamemode.value == 2 && !start) {\n            return (<span>{'Start the battle'}</span>)\n        }\n        return (<span>{'Get some popcorn'}</span>)\n    }\n\n    //Buttons for gameboard property mutation\n    const displayBeforeStartButtons = (id) => {\n        return (\n            <div className=\"button-container\">\n                <div id=\"p1-bottom-side\">\n                    <button\n                        className=\"in-game-btn\"\n                        id={id === 'cv1' ? 'randomize-p1' : 'randomize-p2'}\n                        onClick={randomizeShipLocation}\n                    >\n                        Randomize\n                    </button>\n                    <button\n                        className=\"in-game-btn\"\n                        id={id === 'cv1' ? 'tglVsb-p1' : 'tglVsb-p2'}\n                        onClick={toggleShipVisibility}\n                    >\n                        Toggle visibility\n                    </button>\n                </div>\n            </div>\n        )\n    }\n\n    const displayUpperButtons = () => {\n        return (\n            <div id=\"upper-button-container\">\n                <button\n                    onClick={!start ? handleStartButton : HandleRestartButton}\n                >\n                    {!start ? <i className=\"fas fa-play\"></i> : <i className=\"fas fa-redo-alt\"></i>}\n\n                </button>\n                <button\n                    id=\"outcome-visibility-button\"\n                    onClick={handleVisibilityButton}\n                >\n                    {outcomesVisibility ? <i className=\"fas fa-eye\"></i> : <i className=\"fas fa-eye-slash\"></i>}\n                </button>\n            </div>\n        )\n    }\n\n    //Initial render of empty gameboard\n    useEffect(() => {\n        const cv1 = cv1Ref.current;\n        const cv2 = cv2Ref.current;\n        const ctx1 = cv1.getContext('2d');\n        const ctx2 = cv2.getContext('2d');\n        drawBoard(ctx1, SIZE, P1);\n        drawBoard(ctx2, SIZE, P2);\n    }, [toggleP1ShipVisibility, toggleP2ShipVisibility])\n\n    //Main side-effects of present gameplay\n    useEffect(() => {\n        const cv1 = cv1Ref.current;\n        const cv2 = cv2Ref.current;\n        const ctx1 = cv1.getContext('2d');\n        const ctx2 = cv2.getContext('2d');\n        const sz = SIZE * 0.1;\n\n        //Feature availability: to track the current coordinates demanded with mouse event\n        const getCursorPosition = (attacker, defender, cvs, event) => {\n            const rect = cvs.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            return playerAttack(attacker, defender, Math.round((x - sz / 2) / sz), Math.round((y - sz / 2) / sz));\n        }\n\n        const humanAttack = (attacker, defender, cv, ctx) => {\n            function handler(e) {\n                const attackedPosition = getCursorPosition(attacker, defender, cv, e);\n                if (attackedPosition) {\n                    setFakeCount(fakeCount + 1);\n                    cv.removeEventListener('mousedown', handler);\n                    return;\n                }\n                simulateBattleship(ctx, SIZE, defender);\n                setCurrent({\n                    turn: defender.playerNum,\n                    isHuman: defender.isHuman\n                });\n                cv.removeEventListener('mousedown', handler);\n            }\n            if (attacker.turn && start) {\n                LM.add(cv, 'mousedown', handler);\n            }\n        }\n\n        //Allow the human players to choose a coordinates to attack\n        const startHumanAttack = () => {\n            //Conditionally apply event listener\n            humanAttack(P1, P2, cv2, ctx2);\n            humanAttack(P2, P1, cv1, ctx1);\n        }\n\n        //start the round\n        const startAiAttack = () => {\n            if (P1.turn) {\n                autoBattle(P1, P2);\n                simulateBattleship(ctx2, SIZE, P2);\n                setCurrent({\n                    turn: P2.playerNum,\n                    isHuman: P2.isHuman\n                });\n            } else if (P2.turn) {\n                autoBattle(P1, P2);\n                simulateBattleship(ctx1, SIZE, P1);\n                setCurrent({\n                    turn: P1.playerNum,\n                    isHuman: P1.isHuman\n                });\n            }\n        }\n\n        //Delay attack\n        async function attackDelay(ms) {\n            setTimeout(() => {\n                startAiAttack();\n            }, ms)\n            return;\n        }\n\n        //check which player is the current turn\n        async function checkCurrentPlayerTurn() {\n            if (P1.isWinner || P2.isWinner) {\n                setWinner(true);\n                return;\n            }\n            //Check if current player (by turn) is an ai then proceeds\n            if (!current.isHuman) {\n                await attackDelay(1100);\n                return;\n            }\n            startHumanAttack();\n            return;\n        }\n        const startGame = () => {\n            if (start && !winner) {\n                checkCurrentPlayerTurn();\n            }\n            return;\n        }\n        startGame();\n        return (() => {\n            clearTimeout(attackDelay);\n        })\n    }, [current, start, fakeCount])\n\n    return (\n        <div id=\"Battle\">\n            <div id=\"upper-container\">\n                <ReturnToMenu />\n                <div id=\"instructions-wrapper\">\n                    {displayInstruction()}\n                </div>\n                {displayUpperButtons()}\n            </div>\n            {(P1 !== null || P2 !== null) && width <= 500 ? displayTurnOrWinner() : null}\n            <div id=\"main-battle\">\n                {canvasContainer(cv1Ref, SIZE, \"cv1\", P1)}\n                {(P1 !== null || P2 !== null) && width > 500 ? displayTurnOrWinner() : null}\n                {canvasContainer(cv2Ref, SIZE, \"cv2\", P2)}\n            </div>\n            {outcomesVisibility ? enablePrintOutcomes() : null}\n        </div>\n    )\n}\n","import React from 'react';\n\nexport default function Settings({ setGamemode, gamemode, difficulty, setDifficulty }) {\n    const handleGamemodeChange = (event) => {\n        setGamemode({ value: event.target.value });\n    }\n    const handleDifficultyChange = (event) => {\n        if (event.target.id.includes(2) || gamemode.value == 1) {\n            setDifficulty({...difficulty, value: event.target.value, valB: event.target.value});\n            return;\n        } \n        setDifficulty({...difficulty, value: event.target.value, valA: event.target.value});\n    }\n    return (\n        <div id=\"Settings\">\n            <div className=\"custom-select\">\n                <select name=\"gamemodes\" value={gamemode.value} onChange={handleGamemodeChange}>\n                    <option value='0'>PvP</option>\n                    <option value='1'>PvAI</option>\n                    <option value='2'>AIvAI</option>\n                </select>\n            </div>\n\n            {/* Difficulty option for AI as Player1 or AI as both parties */}\n            {gamemode.value == 2 ?\n                <ShowSelectDifficulty\n                    gamemode={gamemode}\n                    difficulty={difficulty}\n                    id={1}\n                    handleDifficultyChange={handleDifficultyChange}\n                /> : null}\n            {gamemode.value != 0 ?\n                <ShowSelectDifficulty\n                    gamemode={gamemode}\n                    difficulty={difficulty}\n                    id={2}\n                    handleDifficultyChange={handleDifficultyChange}\n                /> : null}\n        </div>\n    )\n}\n\nconst ShowSelectDifficulty = ({ gamemode, difficulty, id, handleDifficultyChange }) => {\n    return (\n        <div className=\"custom-select\">\n            <select name=\"diff\" value={gamemode == 1 || id == 2 ? difficulty.valB : difficulty.valA} id={`ai-diff${id}`}onChange={handleDifficultyChange}>\n                <option value='1'>{gamemode.value == 1 || id == 1 ? 'AI: Easy' : 'AI 2: Easy'}</option>\n                <option value='2'>{gamemode.value == 1 || id == 1 ? 'AI: Hard' : 'AI 2: Hard'}</option>\n            </select>\n        </div>\n    )\n\n\n}","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'\n\nimport Battle from './Battle';\nimport Settings from './Settings';\nimport { setGameType } from '../scripts/main';\n\nexport default function Menu() {\n    const [gamemode, setGamemode] = useState({ value: '0' }); //0 = both AI, 1 = Player vs AI, 2 = PvP\n    const [difficulty, setDifficulty] = useState({ value: '1', valA: '1', valB: '1' });\n    return (\n        <Router>\n            <NavigateSwitch\n                gamemode={gamemode}\n                setGamemode={setGamemode}\n                difficulty={difficulty}\n                setDifficulty={setDifficulty}\n            />\n        </Router>\n    )\n}\n\nfunction NavigateSwitch({\n    gamemode,\n    setGamemode,\n    difficulty,\n    setDifficulty}) {\n    return (\n        <Switch>\n            <Route exact path=\"/battleship/\"\n                children={<Home\n                    setGamemode={setGamemode}\n                    gamemode={gamemode}\n                    difficulty={difficulty}\n                    setDifficulty={setDifficulty}\n                />} />\n            <Route exact path=\"/battleship/battle\"\n                children={<Battle gamemode={gamemode} difficulty={difficulty} />} />\n        </Switch>\n    )\n}\n\nfunction Home({ setGamemode, gamemode, difficulty, setDifficulty }) {\n    useEffect(() => {\n        const img = document.getElementById('prf');\n        img.onclick = () => {\n            window.location.href = 'https://github.com/law911012eqw';\n        }\n    })\n    useEffect(() => {\n        const setPreparationBeforeGame = (gamemode, difficulty) => {\n            setGameType(parseInt(gamemode.value), parseInt(difficulty.valA), parseInt(difficulty.valB));\n        }\n        setPreparationBeforeGame(gamemode, difficulty);\n    }, [gamemode, difficulty])\n    return (\n        <div id=\"menu\">\n            <div className=\"title-wrapper\">\n                <h1 id=\"title\" className=\"title\">Battleship</h1>\n                <div className=\"author-wrapper\">\n                    <h2 className=\"divider\"> | </h2>\n                    <h5 className=\"author\">Created by B.B Ant</h5>\n                    <div className=\"frame\">\n                        <img id=\"prf\" className=\"prof\" src=\"https://avatars.githubusercontent.com/u/73290979?s=400&u=2df2e8360dbecaf0265e22194b52647c95ea6e06&v=4\" alt=\"profile\" />\n                    </div>\n                </div>\n\n\n            </div>\n            <nav id=\"nav-menu\">\n                <ul>\n                    <div>\n                        <li>\n                            <Link\n                                to=\"/battleship/battle\"\n                            >\n                                Start Game\n                            </Link>\n                        </li>\n                    </div>\n                </ul>\n            </nav>\n            <Settings\n                setGamemode={setGamemode}\n                gamemode={gamemode}\n                difficulty={difficulty}\n                setDifficulty={setDifficulty}\n            />\n        </div>\n    )\n}","import './App.css';\nimport Menu from './Components/Menu';\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Menu />\n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}